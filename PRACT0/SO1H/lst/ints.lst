     1                                  bits 16
     2                                  
     3                                  ; glb intptr_t : int
     4                                  ; glb uintptr_t : unsigned
     5                                  ; glb intmax_t : int
     6                                  ; glb uintmax_t : unsigned
     7                                  ; glb int8_t : signed char
     8                                  ; glb int_least8_t : signed char
     9                                  ; glb int_fast8_t : signed char
    10                                  ; glb uint8_t : unsigned char
    11                                  ; glb uint_least8_t : unsigned char
    12                                  ; glb uint_fast8_t : unsigned char
    13                                  ; glb int16_t : short
    14                                  ; glb int_least16_t : short
    15                                  ; glb int_fast16_t : short
    16                                  ; glb uint16_t : unsigned short
    17                                  ; glb uint_least16_t : unsigned short
    18                                  ; glb uint_fast16_t : unsigned short
    19                                  ; glb int32_t : int
    20                                  ; glb int_least32_t : int
    21                                  ; glb int_fast32_t : int
    22                                  ; glb uint32_t : unsigned
    23                                  ; glb uint_least32_t : unsigned
    24                                  ; glb uint_fast32_t : unsigned
    25                                  ; glb imaxdiv_t : struct <something>
    26                                  ; glb bool_t : int
    27                                  ; glb pointer_t : * unsigned char
    28                                  ; glb funcion_t : * (
    29                                  ; prm     <something> : * void
    30                                  ;     ) * void
    31                                  ; glb manejador_t : * (void) void
    32                                  ; glb rti_t : * (void) void
    33                                  ; glb isr_t : * (void) void
    34                                  ; glb handler_t : * (void) void
    35                                  ; glb retardarThread_t : * (void) int
    36                                  ; glb ptrTVI_t : * * (void) void
    37                                  ; glb modoSO1_t : int
    38                                  ; glb lh_t : struct <something>
    39                                  ; glb address_t : struct <something>
    40                                  ; glb uPtrAdr_t : union <something>
    41                                  ; glb pid_t : int
    42                                  ; glb tid_t : int
    43                                  ; glb uid_t : int
    44                                  ; glb gid_t : int
    45                                  ; glb pindx_t : int
    46                                  ; glb tindx_t : int
    47                                  ; glb df_t : int
    48                                  ; glb dfs_t : int
    49                                  ; glb rindx_t : int
    50                                  ; glb inportb : (
    51                                  ; prm     port : unsigned short
    52                                  ;     ) unsigned char
    53                                  ; glb inport : (
    54                                  ; prm     port : unsigned short
    55                                  ;     ) unsigned short
    56                                  ; glb outport : (
    57                                  ; prm     port : unsigned short
    58                                  ; prm     val : unsigned short
    59                                  ;     ) void
    60                                  ; glb outportb : (
    61                                  ; prm     port : unsigned short
    62                                  ; prm     val : unsigned char
    63                                  ;     ) void
    64                                  ; glb inportb_r : (
    65                                  ; prm     port : unsigned char
    66                                  ;     ) unsigned char
    67                                  ; glb outportb_r : (
    68                                  ; prm     port : unsigned char
    69                                  ; prm     val : unsigned char
    70                                  ;     ) void
    71                                  ; glb contadorTimer0 : (void) unsigned short
    72                                  ; glb ptrTVI : * * (void) void
    73                                  ; glb valorIMR : (void) unsigned short
    74                                  ; glb establecerIMR : (
    75                                  ; prm     nuevoIMR : unsigned short
    76                                  ;     ) void
    77                                  ; glb mask_pic1 : (
    78                                  ; prm     irq : unsigned char
    79                                  ;     ) void
    80                                  ; glb mask_pic2 : (
    81                                  ; prm     irq : unsigned char
    82                                  ;     ) void
    83                                  ; glb unmask_pic1 : (
    84                                  ; prm     irq : unsigned char
    85                                  ;     ) void
    86                                  ; glb unmask_pic2 : (
    87                                  ; prm     irq : unsigned char
    88                                  ;     ) void
    89                                  ; glb get_pic1_isr : (void) unsigned char
    90                                  ; glb get_pic2_isr : (void) unsigned char
    91                                  ; glb set_pics : (
    92                                  ; prm     irq0 : unsigned char
    93                                  ; prm     irq8 : unsigned char
    94                                  ;     ) void
    95                                  ; glb pic_setup : (void) void
    96                                  ; glb enable_hwirq : (
    97                                  ; prm     hwirq : int
    98                                  ; prm     rti : * (void) void
    99                                  ;     ) void
   100                                  ; glb _start__text : char
   101                                  ; glb _stop__text : char
   102                                  ; glb _start__rodata : char
   103                                  ; glb _stop__rodata : char
   104                                  ; glb _start__data : char
   105                                  ; glb _stop__data : char
   106                                  ; glb _start__bss : char
   107                                  ; glb _stop__bss : char
   108                                  ; glb _start_allcode__ : char
   109                                  ; glb _stop_allcode__ : char
   110                                  ; glb _start_alldata__ : char
   111                                  ; glb _stop_alldata__ : char
   112                                  ; glb mostrarSeccion : (
   113                                  ; prm     start : unsigned
   114                                  ; prm     stop : unsigned
   115                                  ; prm     descripcion : * char
   116                                  ;     ) void
   117                                  ; glb mostrarSecciones : (void) void
   118                                  ; glb modoAp_t : unsigned short
   119                                  ; glb tramaDWords_t : struct <something>
   120                                  ; glb tramaWords_t : struct <something>
   121                                  ; RPN'ized expression: "2 "
   122                                  ; Expanded expression: "2 "
   123                                  ; Expression value: 2
   124                                  ; RPN'ized expression: "2 "
   125                                  ; Expanded expression: "2 "
   126                                  ; Expression value: 2
   127                                  ; RPN'ized expression: "2 "
   128                                  ; Expanded expression: "2 "
   129                                  ; Expression value: 2
   130                                  ; RPN'ized expression: "2 "
   131                                  ; Expanded expression: "2 "
   132                                  ; Expression value: 2
   133                                  ; glb tramaBytes_t : struct <something>
   134                                  ; glb trama_t : union <something>
   135                                  ; RPN'ized expression: "8 "
   136                                  ; Expanded expression: "8 "
   137                                  ; Expression value: 8
   138                                  ; glb bloque_t : struct <something>
   139                                  ; glb ptrBloque_t : * struct <something>
   140                                  ; glb dobleEnlace_t : struct <something>
   141                                  ; glb c2c_t : struct <something>
   142                                  ; glb posicionC2c : (
   143                                  ; prm     i : int
   144                                  ; prm     c2c : struct <something>
   145                                  ;     ) int
   146                                  ; glb eliminarC2c : (
   147                                  ; prm     i : int
   148                                  ; prm     c2c : struct <something>
   149                                  ;     ) void
   150                                  ; glb apilarC2c : (
   151                                  ; prm     i : int
   152                                  ; prm     c2c : struct <something>
   153                                  ;     ) void
   154                                  ; glb encolarC2c : (
   155                                  ; prm     i : int
   156                                  ; prm     c2c : struct <something>
   157                                  ;     ) void
   158                                  ; glb desencolarC2c : (
   159                                  ; prm     c2c : struct <something>
   160                                  ;     ) int
   161                                  ; glb inicializarC2c : (
   162                                  ; prm     c2c : * struct <something>
   163                                  ; prm     e : * struct <something>
   164                                  ; prm     cabecera : int
   165                                  ; prm     compartida : int
   166                                  ;     ) void
   167                                  ; glb ptrC2c_t : * struct <something>
   168                                  ; glb posicionPC2c : (
   169                                  ; prm     i : int
   170                                  ; prm     c2c : * struct <something>
   171                                  ;     ) int
   172                                  ; glb eliminarPC2c : (
   173                                  ; prm     i : int
   174                                  ; prm     ptrC2c : * struct <something>
   175                                  ;     ) void
   176                                  ; glb apilarPC2c : (
   177                                  ; prm     i : int
   178                                  ; prm     ptrC2c : * struct <something>
   179                                  ;     ) void
   180                                  ; glb encolarPC2c : (
   181                                  ; prm     i : int
   182                                  ; prm     ptrC2c : * struct <something>
   183                                  ;     ) void
   184                                  ; glb desencolarPC2c : (
   185                                  ; prm     ptrC2c : * struct <something>
   186                                  ;     ) int
   187                                  ; glb inicializarPC2c : (
   188                                  ; prm     ptrC2c : * struct <something>
   189                                  ; prm     e : * struct <something>
   190                                  ; prm     cabecera : int
   191                                  ; prm     compartida : int
   192                                  ;     ) void
   193                                  ; glb callBack_t : * (
   194                                  ; prm     arg : * void
   195                                  ;     ) int
   196                                  ; RPN'ized expression: "10 "
   197                                  ; Expanded expression: "10 "
   198                                  ; Expression value: 10
   199                                  ; glb descCcb_t : struct <something>
   200                                  ; glb ccb_t : * struct <something>
   201                                  ; glb inicCcb : (
   202                                  ; prm     ccb : * struct <something>
   203                                  ; prm     max : unsigned short
   204                                  ;     ) int
   205                                  ; glb encolarCcb : (
   206                                  ; prm     cb : * (
   207                                  ; prm         arg : * void
   208                                  ;         ) int
   209                                  ; prm     ccb : * struct <something>
   210                                  ;     ) int
   211                                  ; glb desencolarCcb : (
   212                                  ; prm     ccb : * struct <something>
   213                                  ;     ) * (
   214                                  ; prm     arg : * void
   215                                  ;     ) int
   216                                  ; glb eliminarCcb : (
   217                                  ; prm     cb : * (
   218                                  ; prm         arg : * void
   219                                  ;         ) int
   220                                  ; prm     ccb : * struct <something>
   221                                  ;     ) int
   222                                  ; glb eliminarSegCcb : (
   223                                  ; prm     segmento : unsigned short
   224                                  ; prm     ccb : * struct <something>
   225                                  ;     ) int
   226                                  ; glb vaciarCcb : (
   227                                  ; prm     ccb : * struct <something>
   228                                  ;     ) int
   229                                  ; glb atenderCcb : (
   230                                  ; prm     ccb : * struct <something>
   231                                  ;     ) int
   232                                  ; glb estado_t : int
   233                                  ; glb dfa_t : struct <something>
   234                                  ; RPN'ized expression: "12 "
   235                                  ; Expanded expression: "12 "
   236                                  ; Expression value: 12
   237                                  ; RPN'ized expression: "80 "
   238                                  ; Expanded expression: "80 "
   239                                  ; Expression value: 80
   240                                  ; RPN'ized expression: "10 "
   241                                  ; Expanded expression: "10 "
   242                                  ; Expression value: 10
   243                                  ; glb descProceso_t : struct <something>
   244                                  ; glb descThread_t : struct <something>
   245                                  ; glb tipoFichero_t : int
   246                                  ; RPN'ized expression: "9 "
   247                                  ; Expanded expression: "9 "
   248                                  ; Expression value: 9
   249                                  ; glb descFichero_t : struct <something>
   250                                  ; glb tipoRecurso_t : int
   251                                  ; glb open_t : * (
   252                                  ; prm     dfs : int
   253                                  ; prm     modo : unsigned short
   254                                  ;     ) int
   255                                  ; glb release_t : * (
   256                                  ; prm     dfs : int
   257                                  ;     ) int
   258                                  ; glb read_t : * (
   259                                  ; prm     dfs : int
   260                                  ; prm     dir : * unsigned char
   261                                  ; prm     nbytes : unsigned short
   262                                  ;     ) int
   263                                  ; glb aio_read_t : * (
   264                                  ; prm     dfs : int
   265                                  ; prm     dir : * unsigned char
   266                                  ; prm     nbytes : unsigned short
   267                                  ;     ) int
   268                                  ; glb write_t : * (
   269                                  ; prm     dfs : int
   270                                  ; prm     dir : * unsigned char
   271                                  ; prm     nbytes : unsigned short
   272                                  ;     ) int
   273                                  ; glb aio_write_t : * (
   274                                  ; prm     dfs : int
   275                                  ; prm     dir : * unsigned char
   276                                  ; prm     nbytes : unsigned short
   277                                  ;     ) int
   278                                  ; glb lseek_t : * (
   279                                  ; prm     dfs : int
   280                                  ; prm     pos : int
   281                                  ; prm     whence : unsigned short
   282                                  ;     ) int
   283                                  ; glb fcntl_t : * (
   284                                  ; prm     dfs : int
   285                                  ; prm     cmd : unsigned short
   286                                  ; prm     arg : unsigned short
   287                                  ;     ) int
   288                                  ; glb ioctl_t : * (
   289                                  ; prm     dfs : int
   290                                  ; prm     request : unsigned short
   291                                  ; prm     arg : unsigned short
   292                                  ;     ) int
   293                                  ; glb eliminar_t : * (
   294                                  ; prm     pindx : int
   295                                  ;     ) int
   296                                  ; RPN'ized expression: "12 "
   297                                  ; Expanded expression: "12 "
   298                                  ; Expression value: 12
   299                                  ; RPN'ized expression: "2 "
   300                                  ; Expanded expression: "2 "
   301                                  ; Expression value: 2
   302                                  ; RPN'ized expression: "2 "
   303                                  ; Expanded expression: "2 "
   304                                  ; Expression value: 2
   305                                  ; RPN'ized expression: "2 "
   306                                  ; Expanded expression: "2 "
   307                                  ; Expression value: 2
   308                                  ; glb descRecurso_t : struct <something>
   309                                  ; glb info_t : struct <something>
   310                                  ; glb cabecera_t : struct <something>
   311                                  ; RPN'ized expression: "16 1 + "
   312                                  ; Expanded expression: "17 "
   313                                  ; Expression value: 17
   314                                  ; RPN'ized expression: "16 2 + "
   315                                  ; Expanded expression: "18 "
   316                                  ; Expression value: 18
   317                                  ; RPN'ized expression: "2010 1 + "
   318                                  ; Expanded expression: "2011 "
   319                                  ; Expression value: 2011
   320                                  ; RPN'ized expression: "2010 2 + "
   321                                  ; Expanded expression: "2012 "
   322                                  ; Expression value: 2012
   323                                  ; RPN'ized expression: "20 1 + "
   324                                  ; Expanded expression: "21 "
   325                                  ; Expression value: 21
   326                                  ; RPN'ized expression: "20 2 + "
   327                                  ; Expanded expression: "22 "
   328                                  ; Expression value: 22
   329                                  ; RPN'ized expression: "14 1 + "
   330                                  ; Expanded expression: "15 "
   331                                  ; Expression value: 15
   332                                  ; RPN'ized expression: "14 2 + "
   333                                  ; Expanded expression: "16 "
   334                                  ; Expression value: 16
   335                                  ; RPN'ized expression: "16 16 + "
   336                                  ; Expanded expression: "32 "
   337                                  ; Expression value: 32
   338                                  ; RPN'ized expression: "2010 16 + "
   339                                  ; Expanded expression: "2026 "
   340                                  ; Expression value: 2026
   341                                  ; RPN'ized expression: "2010 1 + "
   342                                  ; Expanded expression: "2011 "
   343                                  ; Expression value: 2011
   344                                  ; RPN'ized expression: "2010 1 + "
   345                                  ; Expanded expression: "2011 "
   346                                  ; Expression value: 2011
   347                                  ; RPN'ized expression: "16 1 + "
   348                                  ; Expanded expression: "17 "
   349                                  ; Expression value: 17
   350                                  ; RPN'ized expression: "2010 1 + "
   351                                  ; Expanded expression: "2011 "
   352                                  ; Expression value: 2011
   353                                  ; RPN'ized expression: "20 14 + "
   354                                  ; Expanded expression: "34 "
   355                                  ; Expression value: 34
   356                                  ; glb e2PFR_t : struct <something>
   357                                  ; glb cPFR_t : int
   358                                  ; glb sigThread_t : * () int
   359                                  ; glb activarThread_t : * (
   360                                  ; prm     tindx : int
   361                                  ;     ) void
   362                                  ; glb buscarNuevoThreadActual_t : * (void) void
   363                                  ; glb bloquearThreadActual_t : * (
   364                                  ; prm     rindx : int
   365                                  ;     ) void
   366                                  ; glb descSO1H_t : struct <something>
   367                                  %define SP0_SO1H 0x8000
   368                                  %define SP0_Kernel  0xA000
   369                                  ; glb startBin : (void) void
   370                                  ; glb modoSO1 : (void) int
   371                                  ; glb unidadBIOS : (void) unsigned char
   372                                  ; glb CS_SO1H : unsigned short
   373                                  ; glb RO_SO1H : unsigned short
   374                                  ; glb DS_SO1H : unsigned short
   375                                  ; glb BSS_SO1H : unsigned short
   376                                  ; glb SS_SO1H : unsigned short
   377                                  ; glb SS_Kernel : unsigned short
   378                                  ; glb IMRInicial : unsigned short
   379                                  ; glb obtenerMapa : (void) void
   380                                  ; RPN'ized expression: "12 "
   381                                  ; Expanded expression: "12 "
   382                                  ; Expression value: 12
   383                                  ; RPN'ized expression: "80 "
   384                                  ; Expanded expression: "80 "
   385                                  ; Expression value: 80
   386                                  ; RPN'ized expression: "10 "
   387                                  ; Expanded expression: "10 "
   388                                  ; Expression value: 10
   389                                  ; glb descProcesoExt_t : struct <something>
   390                                  ; glb descThreadExt_t : struct <something>
   391                                  ; RPN'ized expression: "16 "
   392                                  ; Expanded expression: "16 "
   393                                  ; Expression value: 16
   394                                  ; glb descProceso : [16u] struct <something>
   395                                  ; RPN'ized expression: "2010 "
   396                                  ; Expanded expression: "2010 "
   397                                  ; Expression value: 2010
   398                                  ; glb descThread : [2010u] struct <something>
   399                                  ; RPN'ized expression: "20 "
   400                                  ; Expanded expression: "20 "
   401                                  ; Expression value: 20
   402                                  ; glb descFichero : [20u] struct <something>
   403                                  ; RPN'ized expression: "14 "
   404                                  ; Expanded expression: "14 "
   405                                  ; Expression value: 14
   406                                  ; glb descRecurso : [14u] struct <something>
   407                                  ; RPN'ized expression: "numColasPFR "
   408                                  ; Expanded expression: "12 "
   409                                  ; Expression value: 12
   410                                  ; glb c2cPFR : [12u] struct <something>
   411                                  ; glb e2PFR : struct <something>
   412                                  ; glb descCcbAlEpilogo : struct <something>
   413                                  ; glb ccbAlEpilogo : * struct <something>
   414                                  ; glb tramaThread : * union <something>
   415                                  ; glb tramaTarea : * union <something>
   416                                  ; glb indThreadActual : int
   417                                  ; glb indProcesoActual : int
   418                                  ; glb indThreadDeSuperficie : int
   419                                  ; glb contRodajas : unsigned
   420                                  ; glb contTicsRodaja : int
   421                                  ; glb contadorTimer00 : unsigned short
   422                                  ; glb contOcioso : int
   423                                  ; glb nuevoPid : (void) int
   424                                  ; glb nuevoTid : (void) int
   425                                  ; glb indice : (
   426                                  ; prm     tid : int
   427                                  ;     ) int
   428                                  ; glb sigThread : (void) int
   429                                  ; glb activarThread : (
   430                                  ; prm     tindx : int
   431                                  ;     ) int
   432                                  ; glb registrarEnPOrdenados : (
   433                                  ; prm     pindx : int
   434                                  ;     ) void
   435                                  ; glb crearThread : (
   436                                  ; prm     funcion : * (
   437                                  ; prm         <something> : * void
   438                                  ;         ) * void
   439                                  ; prm     SP0 : unsigned short
   440                                  ; prm     arg : * void
   441                                  ; prm     pindx : int
   442                                  ;     ) int
   443                                  ; glb crearProceso : (
   444                                  ; prm     segmento : unsigned short
   445                                  ; prm     tam : unsigned short
   446                                  ; prm     tamFich : unsigned
   447                                  ; prm     programa : * char
   448                                  ; prm     comando : * char
   449                                  ; prm     pindx : int
   450                                  ;     ) int
   451                                  ; glb inicProcesos : (void) void
   452                                  ; glb resetPids : (void) void
   453                                  ; glb resetTids : (void) void
   454                                  ; glb terminarThreadIndx : (
   455                                  ; prm     tindx : int
   456                                  ;     ) int
   457                                  ; glb eliminarThreadIndx : (
   458                                  ; prm     tindx : int
   459                                  ;     ) int
   460                                  ; glb terminarProcIndx : (
   461                                  ; prm     pindx : int
   462                                  ;     ) int
   463                                  ; glb eliminarProcIndx : (
   464                                  ; prm     pindx : int
   465                                  ;     ) int
   466                                  ; glb matarThreadIndx : (
   467                                  ; prm     tindx : int
   468                                  ;     ) int
   469                                  ; glb matarProcIndx : (
   470                                  ; prm     pindx : int
   471                                  ;     ) int
   472                                  ; glb link_procs : (void) void
   473                                  ; glb SS_Thread : unsigned short
   474                                  ; glb SP_Thread : unsigned short
   475                                  ; glb SS_Tarea : unsigned short
   476                                  ; glb SP_Tarea : unsigned short
   477                                  ; glb nivelActivacionSO1H : int
   478                                  ; glb nVIntActual : int
   479                                  ; glb enHalt : int
   480                                  ; glb activarAlEpilogo1 : int
   481                                  ; glb hayTic : int
   482                                  ; glb setKernelStack : (void) void
   483                                  ; glb setThreadStack : (
   484                                  ; prm     SS_Thread : unsigned short
   485                                  ; prm     SP_Thread : unsigned short
   486                                  ;     ) void
   487                                  ; glb reg_DL : (void) unsigned
   488                                  ; glb prepararDesbloqueadosUrgentes : (void) void
   489                                  ; glb buscarNuevoThreadActual : (void) void
   490                                  ; glb bloquearThreadActual : (
   491                                  ; prm     rindx : int
   492                                  ;     ) void
   493                                  ; RPN'ized expression: "256 "
   494                                  ; Expanded expression: "256 "
   495                                  ; Expression value: 256
   496                                  ; glb VIOrg : [256u] * (void) void
   497                                  ; RPN'ized expression: "256 "
   498                                  ; Expanded expression: "256 "
   499                                  ; Expression value: 256
   500                                  ; glb recVInt : [256u] int
   501                                  ; glb redirigirInt : (
   502                                  ; prm     nVInt : unsigned char
   503                                  ; prm     isr : * (void) void
   504                                  ;     ) void
   505                                  ; glb redirigirIntHardware : (
   506                                  ; prm     irq : unsigned char
   507                                  ; prm     isr : * (void) void
   508                                  ;     ) void
   509                                  ; glb restablecerInt : (
   510                                  ; prm     nVInt : int
   511                                  ;     ) void
   512                                  ; glb inicTVI : (void) void
   513                                  ; glb link_ints : (void) void
   514                                  ; glb printCarVideo : (
   515                                  ; prm     car : char
   516                                  ;     ) int
   517                                  ; glb printLnVideo : (void) int
   518                                  ; glb printStrVideo : (
   519                                  ; prm     str : * char
   520                                  ;     ) int
   521                                  ; glb printStrHastaVideo : (
   522                                  ; prm     str : * char
   523                                  ; prm     n : unsigned short
   524                                  ; prm     lleno : int
   525                                  ;     ) int
   526                                  ; glb printDecVideo : (
   527                                  ; prm     num : unsigned short
   528                                  ; prm     l : unsigned short
   529                                  ;     ) int
   530                                  ; glb printLDecVideo : (
   531                                  ; prm     num : unsigned
   532                                  ; prm     l : unsigned short
   533                                  ;     ) int
   534                                  ; glb printIntVideo : (
   535                                  ; prm     num : int
   536                                  ; prm     l : unsigned short
   537                                  ;     ) int
   538                                  ; glb printLIntVideo : (
   539                                  ; prm     num : int
   540                                  ; prm     l : unsigned short
   541                                  ;     ) int
   542                                  ; glb printHexVideo : (
   543                                  ; prm     num : unsigned short
   544                                  ; prm     l : unsigned short
   545                                  ;     ) int
   546                                  ; glb printLHexVideo : (
   547                                  ; prm     num : unsigned
   548                                  ; prm     l : unsigned short
   549                                  ;     ) int
   550                                  ; glb printBinVideo : (
   551                                  ; prm     num : unsigned short
   552                                  ; prm     l : unsigned short
   553                                  ;     ) int
   554                                  ; glb printLBinVideo : (
   555                                  ; prm     num : unsigned
   556                                  ; prm     l : unsigned short
   557                                  ;     ) int
   558                                  ; glb printPtrVideo : (
   559                                  ; prm     ptr : * unsigned char
   560                                  ;     ) int
   561                                  ; glb printByteVideo : (
   562                                  ; prm     b : unsigned char
   563                                  ;     ) int
   564                                  ; glb printWordVideo : (
   565                                  ; prm     w : unsigned short
   566                                  ;     ) int
   567                                  ; glb printCadVideo : (
   568                                  ; prm     cad : * char
   569                                  ;     ) int
   570                                   section .text       
   571                                     global _link_ints 
   572                                   _link_ints:         
   573                                  
   574                                  ; RPN'ized expression: "256 "
   575                                  ; Expanded expression: "256 "
   576                                  ; Expression value: 256
   577                                  ; glb VIOrg : [256u] * (void) void
   578                                  section .bss
   579                                  	alignb 4
   580                                  	global	_VIOrg
   581                                  _VIOrg:
   582 00000000 <res 00000400>          	resb	1024
   583                                  
   584                                  ; RPN'ized expression: "256 "
   585                                  ; Expanded expression: "256 "
   586                                  ; Expression value: 256
   587                                  ; glb recVInt : [256u] int
   588                                  section .bss
   589                                  	alignb 4
   590                                  	global	_recVInt
   591                                  _recVInt:
   592 00000400 <res 00000400>          	resb	1024
   593                                  
   594                                  ; glb isrNula : (void) void
   595                                  section .text
   596                                  	global	_isrNula
   597                                  _isrNula:
   598 00000000 6655                    	push	ebp
   599 00000002 660FB7EC                	movzx	ebp, sp
   600                                  	;sub	sp,          0
   601                                  L1:
   602 00000006 66                      	db	0x66
   603 00000007 C9                      	leave
   604 00000008 CB                      	retf
   605                                  L3:
   606                                  
   607                                  section .fxnsz noalloc
   608 00000000 09000000                	dd	L3 - _isrNula
   609                                  
   610                                  ; RPN'ized expression: "256 "
   611                                  ; Expanded expression: "256 "
   612                                  ; Expression value: 256
   613                                  ; glb isr : [256u] * (void) void
   614                                  section .bss
   615                                  	alignb 4
   616                                  	global	_isr
   617                                  _isr:
   618 00000800 <res 00000400>          	resb	1024
   619                                  
   620                                  %macro RTI 2         
   621                                         pushad        
   622                                         mov dl,0%1%2h 
   623                                         jmp word fin  
   624                                  %endmacro            
   625                                  
   626                                  %macro RTIF 1                                     
   627                                   RTI %1, 0 
   628                                   RTI %1, 1 
   629                                   RTI %1, 2 
   630                                   RTI %1, 3 
   631                                   RTI %1, 4 
   632                                   RTI %1, 5 
   633                                   RTI %1, 6 
   634                                   RTI %1, 7 
   635                                   RTI %1, 8 
   636                                   RTI %1, 9 
   637                                   RTI %1, a 
   638                                   RTI %1, b 
   639                                   RTI %1, c 
   640                                   RTI %1, d 
   641                                   RTI %1, e 
   642                                   RTI %1, f 
   643                                  %endmacro                                         
   644                                  
   645                                  ; glb rti_00 : (void) void
   646                                  ; glb envolvente_00 : (void) void
   647                                  section .text
   648                                  	global	_envolvente_00
   649                                  _envolvente_00:
   650 00000009 6655                    	push	ebp
   651 0000000B 660FB7EC                	movzx	ebp, sp
   652                                  	;sub	sp,          0
   653                                  ; rti_00_entry:
   654                                  L6:
   655                                   section .text                        
   656                                     global _rti_00                     
   657                                   _rti_00:                             
   658                                   RTIF 0 
   658                              <1>  RTI %1, 0
   658 0000000F 6660                <2>  pushad
   658 00000011 B200                <2>  mov dl,0%1%2h
   658 00000013 E9F906              <2>  jmp word fin
   658                              <1>  RTI %1, 1
   658 00000016 6660                <2>  pushad
   658 00000018 B201                <2>  mov dl,0%1%2h
   658 0000001A E9F206              <2>  jmp word fin
   658                              <1>  RTI %1, 2
   658 0000001D 6660                <2>  pushad
   658 0000001F B202                <2>  mov dl,0%1%2h
   658 00000021 E9EB06              <2>  jmp word fin
   658                              <1>  RTI %1, 3
   658 00000024 6660                <2>  pushad
   658 00000026 B203                <2>  mov dl,0%1%2h
   658 00000028 E9E406              <2>  jmp word fin
   658                              <1>  RTI %1, 4
   658 0000002B 6660                <2>  pushad
   658 0000002D B204                <2>  mov dl,0%1%2h
   658 0000002F E9DD06              <2>  jmp word fin
   658                              <1>  RTI %1, 5
   658 00000032 6660                <2>  pushad
   658 00000034 B205                <2>  mov dl,0%1%2h
   658 00000036 E9D606              <2>  jmp word fin
   658                              <1>  RTI %1, 6
   658 00000039 6660                <2>  pushad
   658 0000003B B206                <2>  mov dl,0%1%2h
   658 0000003D E9CF06              <2>  jmp word fin
   658                              <1>  RTI %1, 7
   658 00000040 6660                <2>  pushad
   658 00000042 B207                <2>  mov dl,0%1%2h
   658 00000044 E9C806              <2>  jmp word fin
   658                              <1>  RTI %1, 8
   658 00000047 6660                <2>  pushad
   658 00000049 B208                <2>  mov dl,0%1%2h
   658 0000004B E9C106              <2>  jmp word fin
   658                              <1>  RTI %1, 9
   658 0000004E 6660                <2>  pushad
   658 00000050 B209                <2>  mov dl,0%1%2h
   658 00000052 E9BA06              <2>  jmp word fin
   658                              <1>  RTI %1, a
   658 00000055 6660                <2>  pushad
   658 00000057 B20A                <2>  mov dl,0%1%2h
   658 00000059 E9B306              <2>  jmp word fin
   658                              <1>  RTI %1, b
   658 0000005C 6660                <2>  pushad
   658 0000005E B20B                <2>  mov dl,0%1%2h
   658 00000060 E9AC06              <2>  jmp word fin
   658                              <1>  RTI %1, c
   658 00000063 6660                <2>  pushad
   658 00000065 B20C                <2>  mov dl,0%1%2h
   658 00000067 E9A506              <2>  jmp word fin
   658                              <1>  RTI %1, d
   658 0000006A 6660                <2>  pushad
   658 0000006C B20D                <2>  mov dl,0%1%2h
   658 0000006E E99E06              <2>  jmp word fin
   658                              <1>  RTI %1, e
   658 00000071 6660                <2>  pushad
   658 00000073 B20E                <2>  mov dl,0%1%2h
   658 00000075 E99706              <2>  jmp word fin
   658                              <1>  RTI %1, f
   658 00000078 6660                <2>  pushad
   658 0000007A B20F                <2>  mov dl,0%1%2h
   658 0000007C E99006              <2>  jmp word fin
   659                                   RTIF 1 
   659                              <1>  RTI %1, 0
   659 0000007F 6660                <2>  pushad
   659 00000081 B210                <2>  mov dl,0%1%2h
   659 00000083 E98906              <2>  jmp word fin
   659                              <1>  RTI %1, 1
   659 00000086 6660                <2>  pushad
   659 00000088 B211                <2>  mov dl,0%1%2h
   659 0000008A E98206              <2>  jmp word fin
   659                              <1>  RTI %1, 2
   659 0000008D 6660                <2>  pushad
   659 0000008F B212                <2>  mov dl,0%1%2h
   659 00000091 E97B06              <2>  jmp word fin
   659                              <1>  RTI %1, 3
   659 00000094 6660                <2>  pushad
   659 00000096 B213                <2>  mov dl,0%1%2h
   659 00000098 E97406              <2>  jmp word fin
   659                              <1>  RTI %1, 4
   659 0000009B 6660                <2>  pushad
   659 0000009D B214                <2>  mov dl,0%1%2h
   659 0000009F E96D06              <2>  jmp word fin
   659                              <1>  RTI %1, 5
   659 000000A2 6660                <2>  pushad
   659 000000A4 B215                <2>  mov dl,0%1%2h
   659 000000A6 E96606              <2>  jmp word fin
   659                              <1>  RTI %1, 6
   659 000000A9 6660                <2>  pushad
   659 000000AB B216                <2>  mov dl,0%1%2h
   659 000000AD E95F06              <2>  jmp word fin
   659                              <1>  RTI %1, 7
   659 000000B0 6660                <2>  pushad
   659 000000B2 B217                <2>  mov dl,0%1%2h
   659 000000B4 E95806              <2>  jmp word fin
   659                              <1>  RTI %1, 8
   659 000000B7 6660                <2>  pushad
   659 000000B9 B218                <2>  mov dl,0%1%2h
   659 000000BB E95106              <2>  jmp word fin
   659                              <1>  RTI %1, 9
   659 000000BE 6660                <2>  pushad
   659 000000C0 B219                <2>  mov dl,0%1%2h
   659 000000C2 E94A06              <2>  jmp word fin
   659                              <1>  RTI %1, a
   659 000000C5 6660                <2>  pushad
   659 000000C7 B21A                <2>  mov dl,0%1%2h
   659 000000C9 E94306              <2>  jmp word fin
   659                              <1>  RTI %1, b
   659 000000CC 6660                <2>  pushad
   659 000000CE B21B                <2>  mov dl,0%1%2h
   659 000000D0 E93C06              <2>  jmp word fin
   659                              <1>  RTI %1, c
   659 000000D3 6660                <2>  pushad
   659 000000D5 B21C                <2>  mov dl,0%1%2h
   659 000000D7 E93506              <2>  jmp word fin
   659                              <1>  RTI %1, d
   659 000000DA 6660                <2>  pushad
   659 000000DC B21D                <2>  mov dl,0%1%2h
   659 000000DE E92E06              <2>  jmp word fin
   659                              <1>  RTI %1, e
   659 000000E1 6660                <2>  pushad
   659 000000E3 B21E                <2>  mov dl,0%1%2h
   659 000000E5 E92706              <2>  jmp word fin
   659                              <1>  RTI %1, f
   659 000000E8 6660                <2>  pushad
   659 000000EA B21F                <2>  mov dl,0%1%2h
   659 000000EC E92006              <2>  jmp word fin
   660                                   RTIF 2 
   660                              <1>  RTI %1, 0
   660 000000EF 6660                <2>  pushad
   660 000000F1 B220                <2>  mov dl,0%1%2h
   660 000000F3 E91906              <2>  jmp word fin
   660                              <1>  RTI %1, 1
   660 000000F6 6660                <2>  pushad
   660 000000F8 B221                <2>  mov dl,0%1%2h
   660 000000FA E91206              <2>  jmp word fin
   660                              <1>  RTI %1, 2
   660 000000FD 6660                <2>  pushad
   660 000000FF B222                <2>  mov dl,0%1%2h
   660 00000101 E90B06              <2>  jmp word fin
   660                              <1>  RTI %1, 3
   660 00000104 6660                <2>  pushad
   660 00000106 B223                <2>  mov dl,0%1%2h
   660 00000108 E90406              <2>  jmp word fin
   660                              <1>  RTI %1, 4
   660 0000010B 6660                <2>  pushad
   660 0000010D B224                <2>  mov dl,0%1%2h
   660 0000010F E9FD05              <2>  jmp word fin
   660                              <1>  RTI %1, 5
   660 00000112 6660                <2>  pushad
   660 00000114 B225                <2>  mov dl,0%1%2h
   660 00000116 E9F605              <2>  jmp word fin
   660                              <1>  RTI %1, 6
   660 00000119 6660                <2>  pushad
   660 0000011B B226                <2>  mov dl,0%1%2h
   660 0000011D E9EF05              <2>  jmp word fin
   660                              <1>  RTI %1, 7
   660 00000120 6660                <2>  pushad
   660 00000122 B227                <2>  mov dl,0%1%2h
   660 00000124 E9E805              <2>  jmp word fin
   660                              <1>  RTI %1, 8
   660 00000127 6660                <2>  pushad
   660 00000129 B228                <2>  mov dl,0%1%2h
   660 0000012B E9E105              <2>  jmp word fin
   660                              <1>  RTI %1, 9
   660 0000012E 6660                <2>  pushad
   660 00000130 B229                <2>  mov dl,0%1%2h
   660 00000132 E9DA05              <2>  jmp word fin
   660                              <1>  RTI %1, a
   660 00000135 6660                <2>  pushad
   660 00000137 B22A                <2>  mov dl,0%1%2h
   660 00000139 E9D305              <2>  jmp word fin
   660                              <1>  RTI %1, b
   660 0000013C 6660                <2>  pushad
   660 0000013E B22B                <2>  mov dl,0%1%2h
   660 00000140 E9CC05              <2>  jmp word fin
   660                              <1>  RTI %1, c
   660 00000143 6660                <2>  pushad
   660 00000145 B22C                <2>  mov dl,0%1%2h
   660 00000147 E9C505              <2>  jmp word fin
   660                              <1>  RTI %1, d
   660 0000014A 6660                <2>  pushad
   660 0000014C B22D                <2>  mov dl,0%1%2h
   660 0000014E E9BE05              <2>  jmp word fin
   660                              <1>  RTI %1, e
   660 00000151 6660                <2>  pushad
   660 00000153 B22E                <2>  mov dl,0%1%2h
   660 00000155 E9B705              <2>  jmp word fin
   660                              <1>  RTI %1, f
   660 00000158 6660                <2>  pushad
   660 0000015A B22F                <2>  mov dl,0%1%2h
   660 0000015C E9B005              <2>  jmp word fin
   661                                   RTIF 3 
   661                              <1>  RTI %1, 0
   661 0000015F 6660                <2>  pushad
   661 00000161 B230                <2>  mov dl,0%1%2h
   661 00000163 E9A905              <2>  jmp word fin
   661                              <1>  RTI %1, 1
   661 00000166 6660                <2>  pushad
   661 00000168 B231                <2>  mov dl,0%1%2h
   661 0000016A E9A205              <2>  jmp word fin
   661                              <1>  RTI %1, 2
   661 0000016D 6660                <2>  pushad
   661 0000016F B232                <2>  mov dl,0%1%2h
   661 00000171 E99B05              <2>  jmp word fin
   661                              <1>  RTI %1, 3
   661 00000174 6660                <2>  pushad
   661 00000176 B233                <2>  mov dl,0%1%2h
   661 00000178 E99405              <2>  jmp word fin
   661                              <1>  RTI %1, 4
   661 0000017B 6660                <2>  pushad
   661 0000017D B234                <2>  mov dl,0%1%2h
   661 0000017F E98D05              <2>  jmp word fin
   661                              <1>  RTI %1, 5
   661 00000182 6660                <2>  pushad
   661 00000184 B235                <2>  mov dl,0%1%2h
   661 00000186 E98605              <2>  jmp word fin
   661                              <1>  RTI %1, 6
   661 00000189 6660                <2>  pushad
   661 0000018B B236                <2>  mov dl,0%1%2h
   661 0000018D E97F05              <2>  jmp word fin
   661                              <1>  RTI %1, 7
   661 00000190 6660                <2>  pushad
   661 00000192 B237                <2>  mov dl,0%1%2h
   661 00000194 E97805              <2>  jmp word fin
   661                              <1>  RTI %1, 8
   661 00000197 6660                <2>  pushad
   661 00000199 B238                <2>  mov dl,0%1%2h
   661 0000019B E97105              <2>  jmp word fin
   661                              <1>  RTI %1, 9
   661 0000019E 6660                <2>  pushad
   661 000001A0 B239                <2>  mov dl,0%1%2h
   661 000001A2 E96A05              <2>  jmp word fin
   661                              <1>  RTI %1, a
   661 000001A5 6660                <2>  pushad
   661 000001A7 B23A                <2>  mov dl,0%1%2h
   661 000001A9 E96305              <2>  jmp word fin
   661                              <1>  RTI %1, b
   661 000001AC 6660                <2>  pushad
   661 000001AE B23B                <2>  mov dl,0%1%2h
   661 000001B0 E95C05              <2>  jmp word fin
   661                              <1>  RTI %1, c
   661 000001B3 6660                <2>  pushad
   661 000001B5 B23C                <2>  mov dl,0%1%2h
   661 000001B7 E95505              <2>  jmp word fin
   661                              <1>  RTI %1, d
   661 000001BA 6660                <2>  pushad
   661 000001BC B23D                <2>  mov dl,0%1%2h
   661 000001BE E94E05              <2>  jmp word fin
   661                              <1>  RTI %1, e
   661 000001C1 6660                <2>  pushad
   661 000001C3 B23E                <2>  mov dl,0%1%2h
   661 000001C5 E94705              <2>  jmp word fin
   661                              <1>  RTI %1, f
   661 000001C8 6660                <2>  pushad
   661 000001CA B23F                <2>  mov dl,0%1%2h
   661 000001CC E94005              <2>  jmp word fin
   662                                   RTIF 4 
   662                              <1>  RTI %1, 0
   662 000001CF 6660                <2>  pushad
   662 000001D1 B240                <2>  mov dl,0%1%2h
   662 000001D3 E93905              <2>  jmp word fin
   662                              <1>  RTI %1, 1
   662 000001D6 6660                <2>  pushad
   662 000001D8 B241                <2>  mov dl,0%1%2h
   662 000001DA E93205              <2>  jmp word fin
   662                              <1>  RTI %1, 2
   662 000001DD 6660                <2>  pushad
   662 000001DF B242                <2>  mov dl,0%1%2h
   662 000001E1 E92B05              <2>  jmp word fin
   662                              <1>  RTI %1, 3
   662 000001E4 6660                <2>  pushad
   662 000001E6 B243                <2>  mov dl,0%1%2h
   662 000001E8 E92405              <2>  jmp word fin
   662                              <1>  RTI %1, 4
   662 000001EB 6660                <2>  pushad
   662 000001ED B244                <2>  mov dl,0%1%2h
   662 000001EF E91D05              <2>  jmp word fin
   662                              <1>  RTI %1, 5
   662 000001F2 6660                <2>  pushad
   662 000001F4 B245                <2>  mov dl,0%1%2h
   662 000001F6 E91605              <2>  jmp word fin
   662                              <1>  RTI %1, 6
   662 000001F9 6660                <2>  pushad
   662 000001FB B246                <2>  mov dl,0%1%2h
   662 000001FD E90F05              <2>  jmp word fin
   662                              <1>  RTI %1, 7
   662 00000200 6660                <2>  pushad
   662 00000202 B247                <2>  mov dl,0%1%2h
   662 00000204 E90805              <2>  jmp word fin
   662                              <1>  RTI %1, 8
   662 00000207 6660                <2>  pushad
   662 00000209 B248                <2>  mov dl,0%1%2h
   662 0000020B E90105              <2>  jmp word fin
   662                              <1>  RTI %1, 9
   662 0000020E 6660                <2>  pushad
   662 00000210 B249                <2>  mov dl,0%1%2h
   662 00000212 E9FA04              <2>  jmp word fin
   662                              <1>  RTI %1, a
   662 00000215 6660                <2>  pushad
   662 00000217 B24A                <2>  mov dl,0%1%2h
   662 00000219 E9F304              <2>  jmp word fin
   662                              <1>  RTI %1, b
   662 0000021C 6660                <2>  pushad
   662 0000021E B24B                <2>  mov dl,0%1%2h
   662 00000220 E9EC04              <2>  jmp word fin
   662                              <1>  RTI %1, c
   662 00000223 6660                <2>  pushad
   662 00000225 B24C                <2>  mov dl,0%1%2h
   662 00000227 E9E504              <2>  jmp word fin
   662                              <1>  RTI %1, d
   662 0000022A 6660                <2>  pushad
   662 0000022C B24D                <2>  mov dl,0%1%2h
   662 0000022E E9DE04              <2>  jmp word fin
   662                              <1>  RTI %1, e
   662 00000231 6660                <2>  pushad
   662 00000233 B24E                <2>  mov dl,0%1%2h
   662 00000235 E9D704              <2>  jmp word fin
   662                              <1>  RTI %1, f
   662 00000238 6660                <2>  pushad
   662 0000023A B24F                <2>  mov dl,0%1%2h
   662 0000023C E9D004              <2>  jmp word fin
   663                                   RTIF 5 
   663                              <1>  RTI %1, 0
   663 0000023F 6660                <2>  pushad
   663 00000241 B250                <2>  mov dl,0%1%2h
   663 00000243 E9C904              <2>  jmp word fin
   663                              <1>  RTI %1, 1
   663 00000246 6660                <2>  pushad
   663 00000248 B251                <2>  mov dl,0%1%2h
   663 0000024A E9C204              <2>  jmp word fin
   663                              <1>  RTI %1, 2
   663 0000024D 6660                <2>  pushad
   663 0000024F B252                <2>  mov dl,0%1%2h
   663 00000251 E9BB04              <2>  jmp word fin
   663                              <1>  RTI %1, 3
   663 00000254 6660                <2>  pushad
   663 00000256 B253                <2>  mov dl,0%1%2h
   663 00000258 E9B404              <2>  jmp word fin
   663                              <1>  RTI %1, 4
   663 0000025B 6660                <2>  pushad
   663 0000025D B254                <2>  mov dl,0%1%2h
   663 0000025F E9AD04              <2>  jmp word fin
   663                              <1>  RTI %1, 5
   663 00000262 6660                <2>  pushad
   663 00000264 B255                <2>  mov dl,0%1%2h
   663 00000266 E9A604              <2>  jmp word fin
   663                              <1>  RTI %1, 6
   663 00000269 6660                <2>  pushad
   663 0000026B B256                <2>  mov dl,0%1%2h
   663 0000026D E99F04              <2>  jmp word fin
   663                              <1>  RTI %1, 7
   663 00000270 6660                <2>  pushad
   663 00000272 B257                <2>  mov dl,0%1%2h
   663 00000274 E99804              <2>  jmp word fin
   663                              <1>  RTI %1, 8
   663 00000277 6660                <2>  pushad
   663 00000279 B258                <2>  mov dl,0%1%2h
   663 0000027B E99104              <2>  jmp word fin
   663                              <1>  RTI %1, 9
   663 0000027E 6660                <2>  pushad
   663 00000280 B259                <2>  mov dl,0%1%2h
   663 00000282 E98A04              <2>  jmp word fin
   663                              <1>  RTI %1, a
   663 00000285 6660                <2>  pushad
   663 00000287 B25A                <2>  mov dl,0%1%2h
   663 00000289 E98304              <2>  jmp word fin
   663                              <1>  RTI %1, b
   663 0000028C 6660                <2>  pushad
   663 0000028E B25B                <2>  mov dl,0%1%2h
   663 00000290 E97C04              <2>  jmp word fin
   663                              <1>  RTI %1, c
   663 00000293 6660                <2>  pushad
   663 00000295 B25C                <2>  mov dl,0%1%2h
   663 00000297 E97504              <2>  jmp word fin
   663                              <1>  RTI %1, d
   663 0000029A 6660                <2>  pushad
   663 0000029C B25D                <2>  mov dl,0%1%2h
   663 0000029E E96E04              <2>  jmp word fin
   663                              <1>  RTI %1, e
   663 000002A1 6660                <2>  pushad
   663 000002A3 B25E                <2>  mov dl,0%1%2h
   663 000002A5 E96704              <2>  jmp word fin
   663                              <1>  RTI %1, f
   663 000002A8 6660                <2>  pushad
   663 000002AA B25F                <2>  mov dl,0%1%2h
   663 000002AC E96004              <2>  jmp word fin
   664                                   RTIF 6 
   664                              <1>  RTI %1, 0
   664 000002AF 6660                <2>  pushad
   664 000002B1 B260                <2>  mov dl,0%1%2h
   664 000002B3 E95904              <2>  jmp word fin
   664                              <1>  RTI %1, 1
   664 000002B6 6660                <2>  pushad
   664 000002B8 B261                <2>  mov dl,0%1%2h
   664 000002BA E95204              <2>  jmp word fin
   664                              <1>  RTI %1, 2
   664 000002BD 6660                <2>  pushad
   664 000002BF B262                <2>  mov dl,0%1%2h
   664 000002C1 E94B04              <2>  jmp word fin
   664                              <1>  RTI %1, 3
   664 000002C4 6660                <2>  pushad
   664 000002C6 B263                <2>  mov dl,0%1%2h
   664 000002C8 E94404              <2>  jmp word fin
   664                              <1>  RTI %1, 4
   664 000002CB 6660                <2>  pushad
   664 000002CD B264                <2>  mov dl,0%1%2h
   664 000002CF E93D04              <2>  jmp word fin
   664                              <1>  RTI %1, 5
   664 000002D2 6660                <2>  pushad
   664 000002D4 B265                <2>  mov dl,0%1%2h
   664 000002D6 E93604              <2>  jmp word fin
   664                              <1>  RTI %1, 6
   664 000002D9 6660                <2>  pushad
   664 000002DB B266                <2>  mov dl,0%1%2h
   664 000002DD E92F04              <2>  jmp word fin
   664                              <1>  RTI %1, 7
   664 000002E0 6660                <2>  pushad
   664 000002E2 B267                <2>  mov dl,0%1%2h
   664 000002E4 E92804              <2>  jmp word fin
   664                              <1>  RTI %1, 8
   664 000002E7 6660                <2>  pushad
   664 000002E9 B268                <2>  mov dl,0%1%2h
   664 000002EB E92104              <2>  jmp word fin
   664                              <1>  RTI %1, 9
   664 000002EE 6660                <2>  pushad
   664 000002F0 B269                <2>  mov dl,0%1%2h
   664 000002F2 E91A04              <2>  jmp word fin
   664                              <1>  RTI %1, a
   664 000002F5 6660                <2>  pushad
   664 000002F7 B26A                <2>  mov dl,0%1%2h
   664 000002F9 E91304              <2>  jmp word fin
   664                              <1>  RTI %1, b
   664 000002FC 6660                <2>  pushad
   664 000002FE B26B                <2>  mov dl,0%1%2h
   664 00000300 E90C04              <2>  jmp word fin
   664                              <1>  RTI %1, c
   664 00000303 6660                <2>  pushad
   664 00000305 B26C                <2>  mov dl,0%1%2h
   664 00000307 E90504              <2>  jmp word fin
   664                              <1>  RTI %1, d
   664 0000030A 6660                <2>  pushad
   664 0000030C B26D                <2>  mov dl,0%1%2h
   664 0000030E E9FE03              <2>  jmp word fin
   664                              <1>  RTI %1, e
   664 00000311 6660                <2>  pushad
   664 00000313 B26E                <2>  mov dl,0%1%2h
   664 00000315 E9F703              <2>  jmp word fin
   664                              <1>  RTI %1, f
   664 00000318 6660                <2>  pushad
   664 0000031A B26F                <2>  mov dl,0%1%2h
   664 0000031C E9F003              <2>  jmp word fin
   665                                   RTIF 7 
   665                              <1>  RTI %1, 0
   665 0000031F 6660                <2>  pushad
   665 00000321 B270                <2>  mov dl,0%1%2h
   665 00000323 E9E903              <2>  jmp word fin
   665                              <1>  RTI %1, 1
   665 00000326 6660                <2>  pushad
   665 00000328 B271                <2>  mov dl,0%1%2h
   665 0000032A E9E203              <2>  jmp word fin
   665                              <1>  RTI %1, 2
   665 0000032D 6660                <2>  pushad
   665 0000032F B272                <2>  mov dl,0%1%2h
   665 00000331 E9DB03              <2>  jmp word fin
   665                              <1>  RTI %1, 3
   665 00000334 6660                <2>  pushad
   665 00000336 B273                <2>  mov dl,0%1%2h
   665 00000338 E9D403              <2>  jmp word fin
   665                              <1>  RTI %1, 4
   665 0000033B 6660                <2>  pushad
   665 0000033D B274                <2>  mov dl,0%1%2h
   665 0000033F E9CD03              <2>  jmp word fin
   665                              <1>  RTI %1, 5
   665 00000342 6660                <2>  pushad
   665 00000344 B275                <2>  mov dl,0%1%2h
   665 00000346 E9C603              <2>  jmp word fin
   665                              <1>  RTI %1, 6
   665 00000349 6660                <2>  pushad
   665 0000034B B276                <2>  mov dl,0%1%2h
   665 0000034D E9BF03              <2>  jmp word fin
   665                              <1>  RTI %1, 7
   665 00000350 6660                <2>  pushad
   665 00000352 B277                <2>  mov dl,0%1%2h
   665 00000354 E9B803              <2>  jmp word fin
   665                              <1>  RTI %1, 8
   665 00000357 6660                <2>  pushad
   665 00000359 B278                <2>  mov dl,0%1%2h
   665 0000035B E9B103              <2>  jmp word fin
   665                              <1>  RTI %1, 9
   665 0000035E 6660                <2>  pushad
   665 00000360 B279                <2>  mov dl,0%1%2h
   665 00000362 E9AA03              <2>  jmp word fin
   665                              <1>  RTI %1, a
   665 00000365 6660                <2>  pushad
   665 00000367 B27A                <2>  mov dl,0%1%2h
   665 00000369 E9A303              <2>  jmp word fin
   665                              <1>  RTI %1, b
   665 0000036C 6660                <2>  pushad
   665 0000036E B27B                <2>  mov dl,0%1%2h
   665 00000370 E99C03              <2>  jmp word fin
   665                              <1>  RTI %1, c
   665 00000373 6660                <2>  pushad
   665 00000375 B27C                <2>  mov dl,0%1%2h
   665 00000377 E99503              <2>  jmp word fin
   665                              <1>  RTI %1, d
   665 0000037A 6660                <2>  pushad
   665 0000037C B27D                <2>  mov dl,0%1%2h
   665 0000037E E98E03              <2>  jmp word fin
   665                              <1>  RTI %1, e
   665 00000381 6660                <2>  pushad
   665 00000383 B27E                <2>  mov dl,0%1%2h
   665 00000385 E98703              <2>  jmp word fin
   665                              <1>  RTI %1, f
   665 00000388 6660                <2>  pushad
   665 0000038A B27F                <2>  mov dl,0%1%2h
   665 0000038C E98003              <2>  jmp word fin
   666                                   RTIF 8 
   666                              <1>  RTI %1, 0
   666 0000038F 6660                <2>  pushad
   666 00000391 B280                <2>  mov dl,0%1%2h
   666 00000393 E97903              <2>  jmp word fin
   666                              <1>  RTI %1, 1
   666 00000396 6660                <2>  pushad
   666 00000398 B281                <2>  mov dl,0%1%2h
   666 0000039A E97203              <2>  jmp word fin
   666                              <1>  RTI %1, 2
   666 0000039D 6660                <2>  pushad
   666 0000039F B282                <2>  mov dl,0%1%2h
   666 000003A1 E96B03              <2>  jmp word fin
   666                              <1>  RTI %1, 3
   666 000003A4 6660                <2>  pushad
   666 000003A6 B283                <2>  mov dl,0%1%2h
   666 000003A8 E96403              <2>  jmp word fin
   666                              <1>  RTI %1, 4
   666 000003AB 6660                <2>  pushad
   666 000003AD B284                <2>  mov dl,0%1%2h
   666 000003AF E95D03              <2>  jmp word fin
   666                              <1>  RTI %1, 5
   666 000003B2 6660                <2>  pushad
   666 000003B4 B285                <2>  mov dl,0%1%2h
   666 000003B6 E95603              <2>  jmp word fin
   666                              <1>  RTI %1, 6
   666 000003B9 6660                <2>  pushad
   666 000003BB B286                <2>  mov dl,0%1%2h
   666 000003BD E94F03              <2>  jmp word fin
   666                              <1>  RTI %1, 7
   666 000003C0 6660                <2>  pushad
   666 000003C2 B287                <2>  mov dl,0%1%2h
   666 000003C4 E94803              <2>  jmp word fin
   666                              <1>  RTI %1, 8
   666 000003C7 6660                <2>  pushad
   666 000003C9 B288                <2>  mov dl,0%1%2h
   666 000003CB E94103              <2>  jmp word fin
   666                              <1>  RTI %1, 9
   666 000003CE 6660                <2>  pushad
   666 000003D0 B289                <2>  mov dl,0%1%2h
   666 000003D2 E93A03              <2>  jmp word fin
   666                              <1>  RTI %1, a
   666 000003D5 6660                <2>  pushad
   666 000003D7 B28A                <2>  mov dl,0%1%2h
   666 000003D9 E93303              <2>  jmp word fin
   666                              <1>  RTI %1, b
   666 000003DC 6660                <2>  pushad
   666 000003DE B28B                <2>  mov dl,0%1%2h
   666 000003E0 E92C03              <2>  jmp word fin
   666                              <1>  RTI %1, c
   666 000003E3 6660                <2>  pushad
   666 000003E5 B28C                <2>  mov dl,0%1%2h
   666 000003E7 E92503              <2>  jmp word fin
   666                              <1>  RTI %1, d
   666 000003EA 6660                <2>  pushad
   666 000003EC B28D                <2>  mov dl,0%1%2h
   666 000003EE E91E03              <2>  jmp word fin
   666                              <1>  RTI %1, e
   666 000003F1 6660                <2>  pushad
   666 000003F3 B28E                <2>  mov dl,0%1%2h
   666 000003F5 E91703              <2>  jmp word fin
   666                              <1>  RTI %1, f
   666 000003F8 6660                <2>  pushad
   666 000003FA B28F                <2>  mov dl,0%1%2h
   666 000003FC E91003              <2>  jmp word fin
   667                                   RTIF 9 
   667                              <1>  RTI %1, 0
   667 000003FF 6660                <2>  pushad
   667 00000401 B290                <2>  mov dl,0%1%2h
   667 00000403 E90903              <2>  jmp word fin
   667                              <1>  RTI %1, 1
   667 00000406 6660                <2>  pushad
   667 00000408 B291                <2>  mov dl,0%1%2h
   667 0000040A E90203              <2>  jmp word fin
   667                              <1>  RTI %1, 2
   667 0000040D 6660                <2>  pushad
   667 0000040F B292                <2>  mov dl,0%1%2h
   667 00000411 E9FB02              <2>  jmp word fin
   667                              <1>  RTI %1, 3
   667 00000414 6660                <2>  pushad
   667 00000416 B293                <2>  mov dl,0%1%2h
   667 00000418 E9F402              <2>  jmp word fin
   667                              <1>  RTI %1, 4
   667 0000041B 6660                <2>  pushad
   667 0000041D B294                <2>  mov dl,0%1%2h
   667 0000041F E9ED02              <2>  jmp word fin
   667                              <1>  RTI %1, 5
   667 00000422 6660                <2>  pushad
   667 00000424 B295                <2>  mov dl,0%1%2h
   667 00000426 E9E602              <2>  jmp word fin
   667                              <1>  RTI %1, 6
   667 00000429 6660                <2>  pushad
   667 0000042B B296                <2>  mov dl,0%1%2h
   667 0000042D E9DF02              <2>  jmp word fin
   667                              <1>  RTI %1, 7
   667 00000430 6660                <2>  pushad
   667 00000432 B297                <2>  mov dl,0%1%2h
   667 00000434 E9D802              <2>  jmp word fin
   667                              <1>  RTI %1, 8
   667 00000437 6660                <2>  pushad
   667 00000439 B298                <2>  mov dl,0%1%2h
   667 0000043B E9D102              <2>  jmp word fin
   667                              <1>  RTI %1, 9
   667 0000043E 6660                <2>  pushad
   667 00000440 B299                <2>  mov dl,0%1%2h
   667 00000442 E9CA02              <2>  jmp word fin
   667                              <1>  RTI %1, a
   667 00000445 6660                <2>  pushad
   667 00000447 B29A                <2>  mov dl,0%1%2h
   667 00000449 E9C302              <2>  jmp word fin
   667                              <1>  RTI %1, b
   667 0000044C 6660                <2>  pushad
   667 0000044E B29B                <2>  mov dl,0%1%2h
   667 00000450 E9BC02              <2>  jmp word fin
   667                              <1>  RTI %1, c
   667 00000453 6660                <2>  pushad
   667 00000455 B29C                <2>  mov dl,0%1%2h
   667 00000457 E9B502              <2>  jmp word fin
   667                              <1>  RTI %1, d
   667 0000045A 6660                <2>  pushad
   667 0000045C B29D                <2>  mov dl,0%1%2h
   667 0000045E E9AE02              <2>  jmp word fin
   667                              <1>  RTI %1, e
   667 00000461 6660                <2>  pushad
   667 00000463 B29E                <2>  mov dl,0%1%2h
   667 00000465 E9A702              <2>  jmp word fin
   667                              <1>  RTI %1, f
   667 00000468 6660                <2>  pushad
   667 0000046A B29F                <2>  mov dl,0%1%2h
   667 0000046C E9A002              <2>  jmp word fin
   668                                   RTIF a 
   668                              <1>  RTI %1, 0
   668 0000046F 6660                <2>  pushad
   668 00000471 B2A0                <2>  mov dl,0%1%2h
   668 00000473 E99902              <2>  jmp word fin
   668                              <1>  RTI %1, 1
   668 00000476 6660                <2>  pushad
   668 00000478 B2A1                <2>  mov dl,0%1%2h
   668 0000047A E99202              <2>  jmp word fin
   668                              <1>  RTI %1, 2
   668 0000047D 6660                <2>  pushad
   668 0000047F B2A2                <2>  mov dl,0%1%2h
   668 00000481 E98B02              <2>  jmp word fin
   668                              <1>  RTI %1, 3
   668 00000484 6660                <2>  pushad
   668 00000486 B2A3                <2>  mov dl,0%1%2h
   668 00000488 E98402              <2>  jmp word fin
   668                              <1>  RTI %1, 4
   668 0000048B 6660                <2>  pushad
   668 0000048D B2A4                <2>  mov dl,0%1%2h
   668 0000048F E97D02              <2>  jmp word fin
   668                              <1>  RTI %1, 5
   668 00000492 6660                <2>  pushad
   668 00000494 B2A5                <2>  mov dl,0%1%2h
   668 00000496 E97602              <2>  jmp word fin
   668                              <1>  RTI %1, 6
   668 00000499 6660                <2>  pushad
   668 0000049B B2A6                <2>  mov dl,0%1%2h
   668 0000049D E96F02              <2>  jmp word fin
   668                              <1>  RTI %1, 7
   668 000004A0 6660                <2>  pushad
   668 000004A2 B2A7                <2>  mov dl,0%1%2h
   668 000004A4 E96802              <2>  jmp word fin
   668                              <1>  RTI %1, 8
   668 000004A7 6660                <2>  pushad
   668 000004A9 B2A8                <2>  mov dl,0%1%2h
   668 000004AB E96102              <2>  jmp word fin
   668                              <1>  RTI %1, 9
   668 000004AE 6660                <2>  pushad
   668 000004B0 B2A9                <2>  mov dl,0%1%2h
   668 000004B2 E95A02              <2>  jmp word fin
   668                              <1>  RTI %1, a
   668 000004B5 6660                <2>  pushad
   668 000004B7 B2AA                <2>  mov dl,0%1%2h
   668 000004B9 E95302              <2>  jmp word fin
   668                              <1>  RTI %1, b
   668 000004BC 6660                <2>  pushad
   668 000004BE B2AB                <2>  mov dl,0%1%2h
   668 000004C0 E94C02              <2>  jmp word fin
   668                              <1>  RTI %1, c
   668 000004C3 6660                <2>  pushad
   668 000004C5 B2AC                <2>  mov dl,0%1%2h
   668 000004C7 E94502              <2>  jmp word fin
   668                              <1>  RTI %1, d
   668 000004CA 6660                <2>  pushad
   668 000004CC B2AD                <2>  mov dl,0%1%2h
   668 000004CE E93E02              <2>  jmp word fin
   668                              <1>  RTI %1, e
   668 000004D1 6660                <2>  pushad
   668 000004D3 B2AE                <2>  mov dl,0%1%2h
   668 000004D5 E93702              <2>  jmp word fin
   668                              <1>  RTI %1, f
   668 000004D8 6660                <2>  pushad
   668 000004DA B2AF                <2>  mov dl,0%1%2h
   668 000004DC E93002              <2>  jmp word fin
   669                                   RTIF b 
   669                              <1>  RTI %1, 0
   669 000004DF 6660                <2>  pushad
   669 000004E1 B2B0                <2>  mov dl,0%1%2h
   669 000004E3 E92902              <2>  jmp word fin
   669                              <1>  RTI %1, 1
   669 000004E6 6660                <2>  pushad
   669 000004E8 B2B1                <2>  mov dl,0%1%2h
   669 000004EA E92202              <2>  jmp word fin
   669                              <1>  RTI %1, 2
   669 000004ED 6660                <2>  pushad
   669 000004EF B2B2                <2>  mov dl,0%1%2h
   669 000004F1 E91B02              <2>  jmp word fin
   669                              <1>  RTI %1, 3
   669 000004F4 6660                <2>  pushad
   669 000004F6 B2B3                <2>  mov dl,0%1%2h
   669 000004F8 E91402              <2>  jmp word fin
   669                              <1>  RTI %1, 4
   669 000004FB 6660                <2>  pushad
   669 000004FD B2B4                <2>  mov dl,0%1%2h
   669 000004FF E90D02              <2>  jmp word fin
   669                              <1>  RTI %1, 5
   669 00000502 6660                <2>  pushad
   669 00000504 B2B5                <2>  mov dl,0%1%2h
   669 00000506 E90602              <2>  jmp word fin
   669                              <1>  RTI %1, 6
   669 00000509 6660                <2>  pushad
   669 0000050B B2B6                <2>  mov dl,0%1%2h
   669 0000050D E9FF01              <2>  jmp word fin
   669                              <1>  RTI %1, 7
   669 00000510 6660                <2>  pushad
   669 00000512 B2B7                <2>  mov dl,0%1%2h
   669 00000514 E9F801              <2>  jmp word fin
   669                              <1>  RTI %1, 8
   669 00000517 6660                <2>  pushad
   669 00000519 B2B8                <2>  mov dl,0%1%2h
   669 0000051B E9F101              <2>  jmp word fin
   669                              <1>  RTI %1, 9
   669 0000051E 6660                <2>  pushad
   669 00000520 B2B9                <2>  mov dl,0%1%2h
   669 00000522 E9EA01              <2>  jmp word fin
   669                              <1>  RTI %1, a
   669 00000525 6660                <2>  pushad
   669 00000527 B2BA                <2>  mov dl,0%1%2h
   669 00000529 E9E301              <2>  jmp word fin
   669                              <1>  RTI %1, b
   669 0000052C 6660                <2>  pushad
   669 0000052E B2BB                <2>  mov dl,0%1%2h
   669 00000530 E9DC01              <2>  jmp word fin
   669                              <1>  RTI %1, c
   669 00000533 6660                <2>  pushad
   669 00000535 B2BC                <2>  mov dl,0%1%2h
   669 00000537 E9D501              <2>  jmp word fin
   669                              <1>  RTI %1, d
   669 0000053A 6660                <2>  pushad
   669 0000053C B2BD                <2>  mov dl,0%1%2h
   669 0000053E E9CE01              <2>  jmp word fin
   669                              <1>  RTI %1, e
   669 00000541 6660                <2>  pushad
   669 00000543 B2BE                <2>  mov dl,0%1%2h
   669 00000545 E9C701              <2>  jmp word fin
   669                              <1>  RTI %1, f
   669 00000548 6660                <2>  pushad
   669 0000054A B2BF                <2>  mov dl,0%1%2h
   669 0000054C E9C001              <2>  jmp word fin
   670                                   RTIF c 
   670                              <1>  RTI %1, 0
   670 0000054F 6660                <2>  pushad
   670 00000551 B2C0                <2>  mov dl,0%1%2h
   670 00000553 E9B901              <2>  jmp word fin
   670                              <1>  RTI %1, 1
   670 00000556 6660                <2>  pushad
   670 00000558 B2C1                <2>  mov dl,0%1%2h
   670 0000055A E9B201              <2>  jmp word fin
   670                              <1>  RTI %1, 2
   670 0000055D 6660                <2>  pushad
   670 0000055F B2C2                <2>  mov dl,0%1%2h
   670 00000561 E9AB01              <2>  jmp word fin
   670                              <1>  RTI %1, 3
   670 00000564 6660                <2>  pushad
   670 00000566 B2C3                <2>  mov dl,0%1%2h
   670 00000568 E9A401              <2>  jmp word fin
   670                              <1>  RTI %1, 4
   670 0000056B 6660                <2>  pushad
   670 0000056D B2C4                <2>  mov dl,0%1%2h
   670 0000056F E99D01              <2>  jmp word fin
   670                              <1>  RTI %1, 5
   670 00000572 6660                <2>  pushad
   670 00000574 B2C5                <2>  mov dl,0%1%2h
   670 00000576 E99601              <2>  jmp word fin
   670                              <1>  RTI %1, 6
   670 00000579 6660                <2>  pushad
   670 0000057B B2C6                <2>  mov dl,0%1%2h
   670 0000057D E98F01              <2>  jmp word fin
   670                              <1>  RTI %1, 7
   670 00000580 6660                <2>  pushad
   670 00000582 B2C7                <2>  mov dl,0%1%2h
   670 00000584 E98801              <2>  jmp word fin
   670                              <1>  RTI %1, 8
   670 00000587 6660                <2>  pushad
   670 00000589 B2C8                <2>  mov dl,0%1%2h
   670 0000058B E98101              <2>  jmp word fin
   670                              <1>  RTI %1, 9
   670 0000058E 6660                <2>  pushad
   670 00000590 B2C9                <2>  mov dl,0%1%2h
   670 00000592 E97A01              <2>  jmp word fin
   670                              <1>  RTI %1, a
   670 00000595 6660                <2>  pushad
   670 00000597 B2CA                <2>  mov dl,0%1%2h
   670 00000599 E97301              <2>  jmp word fin
   670                              <1>  RTI %1, b
   670 0000059C 6660                <2>  pushad
   670 0000059E B2CB                <2>  mov dl,0%1%2h
   670 000005A0 E96C01              <2>  jmp word fin
   670                              <1>  RTI %1, c
   670 000005A3 6660                <2>  pushad
   670 000005A5 B2CC                <2>  mov dl,0%1%2h
   670 000005A7 E96501              <2>  jmp word fin
   670                              <1>  RTI %1, d
   670 000005AA 6660                <2>  pushad
   670 000005AC B2CD                <2>  mov dl,0%1%2h
   670 000005AE E95E01              <2>  jmp word fin
   670                              <1>  RTI %1, e
   670 000005B1 6660                <2>  pushad
   670 000005B3 B2CE                <2>  mov dl,0%1%2h
   670 000005B5 E95701              <2>  jmp word fin
   670                              <1>  RTI %1, f
   670 000005B8 6660                <2>  pushad
   670 000005BA B2CF                <2>  mov dl,0%1%2h
   670 000005BC E95001              <2>  jmp word fin
   671                                   RTIF d 
   671                              <1>  RTI %1, 0
   671 000005BF 6660                <2>  pushad
   671 000005C1 B2D0                <2>  mov dl,0%1%2h
   671 000005C3 E94901              <2>  jmp word fin
   671                              <1>  RTI %1, 1
   671 000005C6 6660                <2>  pushad
   671 000005C8 B2D1                <2>  mov dl,0%1%2h
   671 000005CA E94201              <2>  jmp word fin
   671                              <1>  RTI %1, 2
   671 000005CD 6660                <2>  pushad
   671 000005CF B2D2                <2>  mov dl,0%1%2h
   671 000005D1 E93B01              <2>  jmp word fin
   671                              <1>  RTI %1, 3
   671 000005D4 6660                <2>  pushad
   671 000005D6 B2D3                <2>  mov dl,0%1%2h
   671 000005D8 E93401              <2>  jmp word fin
   671                              <1>  RTI %1, 4
   671 000005DB 6660                <2>  pushad
   671 000005DD B2D4                <2>  mov dl,0%1%2h
   671 000005DF E92D01              <2>  jmp word fin
   671                              <1>  RTI %1, 5
   671 000005E2 6660                <2>  pushad
   671 000005E4 B2D5                <2>  mov dl,0%1%2h
   671 000005E6 E92601              <2>  jmp word fin
   671                              <1>  RTI %1, 6
   671 000005E9 6660                <2>  pushad
   671 000005EB B2D6                <2>  mov dl,0%1%2h
   671 000005ED E91F01              <2>  jmp word fin
   671                              <1>  RTI %1, 7
   671 000005F0 6660                <2>  pushad
   671 000005F2 B2D7                <2>  mov dl,0%1%2h
   671 000005F4 E91801              <2>  jmp word fin
   671                              <1>  RTI %1, 8
   671 000005F7 6660                <2>  pushad
   671 000005F9 B2D8                <2>  mov dl,0%1%2h
   671 000005FB E91101              <2>  jmp word fin
   671                              <1>  RTI %1, 9
   671 000005FE 6660                <2>  pushad
   671 00000600 B2D9                <2>  mov dl,0%1%2h
   671 00000602 E90A01              <2>  jmp word fin
   671                              <1>  RTI %1, a
   671 00000605 6660                <2>  pushad
   671 00000607 B2DA                <2>  mov dl,0%1%2h
   671 00000609 E90301              <2>  jmp word fin
   671                              <1>  RTI %1, b
   671 0000060C 6660                <2>  pushad
   671 0000060E B2DB                <2>  mov dl,0%1%2h
   671 00000610 E9FC00              <2>  jmp word fin
   671                              <1>  RTI %1, c
   671 00000613 6660                <2>  pushad
   671 00000615 B2DC                <2>  mov dl,0%1%2h
   671 00000617 E9F500              <2>  jmp word fin
   671                              <1>  RTI %1, d
   671 0000061A 6660                <2>  pushad
   671 0000061C B2DD                <2>  mov dl,0%1%2h
   671 0000061E E9EE00              <2>  jmp word fin
   671                              <1>  RTI %1, e
   671 00000621 6660                <2>  pushad
   671 00000623 B2DE                <2>  mov dl,0%1%2h
   671 00000625 E9E700              <2>  jmp word fin
   671                              <1>  RTI %1, f
   671 00000628 6660                <2>  pushad
   671 0000062A B2DF                <2>  mov dl,0%1%2h
   671 0000062C E9E000              <2>  jmp word fin
   672                                   RTIF e 
   672                              <1>  RTI %1, 0
   672 0000062F 6660                <2>  pushad
   672 00000631 B2E0                <2>  mov dl,0%1%2h
   672 00000633 E9D900              <2>  jmp word fin
   672                              <1>  RTI %1, 1
   672 00000636 6660                <2>  pushad
   672 00000638 B2E1                <2>  mov dl,0%1%2h
   672 0000063A E9D200              <2>  jmp word fin
   672                              <1>  RTI %1, 2
   672 0000063D 6660                <2>  pushad
   672 0000063F B2E2                <2>  mov dl,0%1%2h
   672 00000641 E9CB00              <2>  jmp word fin
   672                              <1>  RTI %1, 3
   672 00000644 6660                <2>  pushad
   672 00000646 B2E3                <2>  mov dl,0%1%2h
   672 00000648 E9C400              <2>  jmp word fin
   672                              <1>  RTI %1, 4
   672 0000064B 6660                <2>  pushad
   672 0000064D B2E4                <2>  mov dl,0%1%2h
   672 0000064F E9BD00              <2>  jmp word fin
   672                              <1>  RTI %1, 5
   672 00000652 6660                <2>  pushad
   672 00000654 B2E5                <2>  mov dl,0%1%2h
   672 00000656 E9B600              <2>  jmp word fin
   672                              <1>  RTI %1, 6
   672 00000659 6660                <2>  pushad
   672 0000065B B2E6                <2>  mov dl,0%1%2h
   672 0000065D E9AF00              <2>  jmp word fin
   672                              <1>  RTI %1, 7
   672 00000660 6660                <2>  pushad
   672 00000662 B2E7                <2>  mov dl,0%1%2h
   672 00000664 E9A800              <2>  jmp word fin
   672                              <1>  RTI %1, 8
   672 00000667 6660                <2>  pushad
   672 00000669 B2E8                <2>  mov dl,0%1%2h
   672 0000066B E9A100              <2>  jmp word fin
   672                              <1>  RTI %1, 9
   672 0000066E 6660                <2>  pushad
   672 00000670 B2E9                <2>  mov dl,0%1%2h
   672 00000672 E99A00              <2>  jmp word fin
   672                              <1>  RTI %1, a
   672 00000675 6660                <2>  pushad
   672 00000677 B2EA                <2>  mov dl,0%1%2h
   672 00000679 E99300              <2>  jmp word fin
   672                              <1>  RTI %1, b
   672 0000067C 6660                <2>  pushad
   672 0000067E B2EB                <2>  mov dl,0%1%2h
   672 00000680 E98C00              <2>  jmp word fin
   672                              <1>  RTI %1, c
   672 00000683 6660                <2>  pushad
   672 00000685 B2EC                <2>  mov dl,0%1%2h
   672 00000687 E98500              <2>  jmp word fin
   672                              <1>  RTI %1, d
   672 0000068A 6660                <2>  pushad
   672 0000068C B2ED                <2>  mov dl,0%1%2h
   672 0000068E E97E00              <2>  jmp word fin
   672                              <1>  RTI %1, e
   672 00000691 6660                <2>  pushad
   672 00000693 B2EE                <2>  mov dl,0%1%2h
   672 00000695 E97700              <2>  jmp word fin
   672                              <1>  RTI %1, f
   672 00000698 6660                <2>  pushad
   672 0000069A B2EF                <2>  mov dl,0%1%2h
   672 0000069C E97000              <2>  jmp word fin
   673                                   RTIF f 
   673                              <1>  RTI %1, 0
   673 0000069F 6660                <2>  pushad
   673 000006A1 B2F0                <2>  mov dl,0%1%2h
   673 000006A3 E96900              <2>  jmp word fin
   673                              <1>  RTI %1, 1
   673 000006A6 6660                <2>  pushad
   673 000006A8 B2F1                <2>  mov dl,0%1%2h
   673 000006AA E96200              <2>  jmp word fin
   673                              <1>  RTI %1, 2
   673 000006AD 6660                <2>  pushad
   673 000006AF B2F2                <2>  mov dl,0%1%2h
   673 000006B1 E95B00              <2>  jmp word fin
   673                              <1>  RTI %1, 3
   673 000006B4 6660                <2>  pushad
   673 000006B6 B2F3                <2>  mov dl,0%1%2h
   673 000006B8 E95400              <2>  jmp word fin
   673                              <1>  RTI %1, 4
   673 000006BB 6660                <2>  pushad
   673 000006BD B2F4                <2>  mov dl,0%1%2h
   673 000006BF E94D00              <2>  jmp word fin
   673                              <1>  RTI %1, 5
   673 000006C2 6660                <2>  pushad
   673 000006C4 B2F5                <2>  mov dl,0%1%2h
   673 000006C6 E94600              <2>  jmp word fin
   673                              <1>  RTI %1, 6
   673 000006C9 6660                <2>  pushad
   673 000006CB B2F6                <2>  mov dl,0%1%2h
   673 000006CD E93F00              <2>  jmp word fin
   673                              <1>  RTI %1, 7
   673 000006D0 6660                <2>  pushad
   673 000006D2 B2F7                <2>  mov dl,0%1%2h
   673 000006D4 E93800              <2>  jmp word fin
   673                              <1>  RTI %1, 8
   673 000006D7 6660                <2>  pushad
   673 000006D9 B2F8                <2>  mov dl,0%1%2h
   673 000006DB E93100              <2>  jmp word fin
   673                              <1>  RTI %1, 9
   673 000006DE 6660                <2>  pushad
   673 000006E0 B2F9                <2>  mov dl,0%1%2h
   673 000006E2 E92A00              <2>  jmp word fin
   673                              <1>  RTI %1, a
   673 000006E5 6660                <2>  pushad
   673 000006E7 B2FA                <2>  mov dl,0%1%2h
   673 000006E9 E92300              <2>  jmp word fin
   673                              <1>  RTI %1, b
   673 000006EC 6660                <2>  pushad
   673 000006EE B2FB                <2>  mov dl,0%1%2h
   673 000006F0 E91C00              <2>  jmp word fin
   673                              <1>  RTI %1, c
   673 000006F3 6660                <2>  pushad
   673 000006F5 B2FC                <2>  mov dl,0%1%2h
   673 000006F7 E91500              <2>  jmp word fin
   673                              <1>  RTI %1, d
   673 000006FA 6660                <2>  pushad
   673 000006FC B2FD                <2>  mov dl,0%1%2h
   673 000006FE E90E00              <2>  jmp word fin
   673                              <1>  RTI %1, e
   673 00000701 6660                <2>  pushad
   673 00000703 B2FE                <2>  mov dl,0%1%2h
   673 00000705 E90700              <2>  jmp word fin
   673                              <1>  RTI %1, f
   673 00000708 6660                <2>  pushad
   673 0000070A B2FF                <2>  mov dl,0%1%2h
   673 0000070C E90000              <2>  jmp word fin
   674                                  fin:                                  
   675                                  
   676 0000070F 06                         push es 
   677 00000710 1E                         push ds 
   678                                  
   679                                  ; if
   680                                  ; RPN'ized expression: "nivelActivacionSO1H ++ 1 == "
   681                                  ; Expanded expression: "nivelActivacionSO1H ++(4) 1 == "
   682                                  ; Fused expression:    "nivelActivacionSO1H ++(4) *ax == ax 1 IF! "
   683                                  section .relod
   684 00000000 [13070000]              	dd	L9
   685                                  section .text
   686 00000711 66B8                    	db	0x66, 0xB8
   687                                  L9:
   688 00000713 [00000000]              	dd	_nivelActivacionSO1H
   689 00000717 6689C3                  	mov	ebx, eax
   690 0000071A 6689DE                  	mov	esi, ebx
   691 0000071D 66C1CE04                	ror	esi, 4
   692 00000721 8EDE                    	mov	ds, si
   693 00000723 66C1EE1C                	shr	esi, 28
   694 00000727 66FF04                  	inc	dword [si]
   695 0000072A 668B04                  	mov	eax, [si]
   696 0000072D 6683F801                	cmp	eax, 1
   697 00000731 750F                    	jne	L7
   698                                  ; {
   699 00000733 6654                       push esp     
   700 00000735 8CD0                       mov ax,ss    
   701 00000737 660FB7C0                   movzx eax,ax 
   702 0000073B 6650                       push eax     
   703                                  
   704                                  ; RPN'ized expression: "( setKernelStack ) "
   705                                  ; Expanded expression: " setKernelStack ()0 "
   706                                  ; Fused expression:    "( setKernelStack )0 "
   707 0000073D 9A                      	db	0x9A
   708                                  section .relot
   709 00000000 [3E070000]              	dd	L10
   710                                  section .text
   711                                  L10:
   712 0000073E [00000000]              	dd	_setKernelStack
   713                                  ; }
   714                                  L7:
   715                                  ; RPN'ized expression: "nVIntActual ( reg_DL ) = "
   716                                  ; Expanded expression: "nVIntActual  reg_DL ()0 =(4) "
   717                                  ; Fused expression:    "nVIntActual push-ax ( reg_DL )0 =(204) **sp ax "
   718                                  section .relod
   719 00000004 [44070000]              	dd	L11
   720                                  section .text
   721 00000742 66B8                    	db	0x66, 0xB8
   722                                  L11:
   723 00000744 [00000000]              	dd	_nVIntActual
   724 00000748 6650                    	push	eax
   725 0000074A 9A                      	db	0x9A
   726                                  section .relot
   727 00000004 [4B070000]              	dd	L12
   728                                  section .text
   729                                  L12:
   730 0000074B [00000000]              	dd	_reg_DL
   731 0000074F 665B                    	pop	ebx
   732 00000751 6689DE                  	mov	esi, ebx
   733 00000754 66C1CE04                	ror	esi, 4
   734 00000758 8EDE                    	mov	ds, si
   735 0000075A 66C1EE1C                	shr	esi, 28
   736 0000075E 668904                  	mov	[si], eax
   737                                  ; RPN'ized expression: "( isr nVIntActual + *u ) "
   738                                  ; Expanded expression: " isr nVIntActual *(4) 4 * + *(4) ()0 "
   739                                  ; Fused expression:    "( isr push-ax nVIntActual * *ax 4 + *sp ax *(4) ax )0 "
   740                                  section .relod
   741 00000008 [63070000]              	dd	L13
   742                                  section .text
   743 00000761 66B8                    	db	0x66, 0xB8
   744                                  L13:
   745 00000763 [00080000]              	dd	_isr
   746 00000767 6650                    	push	eax
   747                                  section .relod
   748 0000000C [6B070000]              	dd	L14
   749                                  section .text
   750 00000769 66B8                    	db	0x66, 0xB8
   751                                  L14:
   752 0000076B [00000000]              	dd	_nVIntActual
   753 0000076F 6689C3                  	mov	ebx, eax
   754 00000772 6689DE                  	mov	esi, ebx
   755 00000775 66C1CE04                	ror	esi, 4
   756 00000779 8EDE                    	mov	ds, si
   757 0000077B 66C1EE1C                	shr	esi, 28
   758 0000077F 668B04                  	mov	eax, [si]
   759 00000782 666BC004                	imul	eax, eax, 4
   760 00000786 6689C1                  	mov	ecx, eax
   761 00000789 6658                    	pop	eax
   762 0000078B 6601C8                  	add	eax, ecx
   763 0000078E 6689C3                  	mov	ebx, eax
   764 00000791 6689DE                  	mov	esi, ebx
   765 00000794 66C1CE04                	ror	esi, 4
   766 00000798 8EDE                    	mov	ds, si
   767 0000079A 66C1EE1C                	shr	esi, 28
   768 0000079E 668B04                  	mov	eax, [si]
   769 000007A1 9A                      	db	0x9A
   770                                  section .relot
   771 00000008 [A2070000]              	dd	L15
   772                                  section .text
   773                                  L15:
   774 000007A2 [A6070000]              	dd	L16
   775                                  L16:
   776 000007A6 89E6                    	mov	si, sp
   777 000007A8 36830410                	add	word [ss:si], L17 - L16
   778 000007AC 66C1E00C                	shl	eax, 12
   779 000007B0 C1C004                  	rol	ax, 4
   780 000007B3 6650                    	push	eax
   781 000007B5 CB                      	retf
   782                                  L17:
   783                                  ; if
   784                                  ; RPN'ized expression: "nivelActivacionSO1H 1 == enHalt || "
   785                                  ; Expanded expression: "nivelActivacionSO1H *(4) 1 == [sh||->20] enHalt *(4) _Bool ||[20] "
   786                                  ; Fused expression:    "nivelActivacionSO1H == *ax 1 [sh||->20] enHalt *(4) ax _Bool ||[20]  "
   787                                  section .relod
   788 00000010 [B8070000]              	dd	L21
   789                                  section .text
   790 000007B6 66B8                    	db	0x66, 0xB8
   791                                  L21:
   792 000007B8 [00000000]              	dd	_nivelActivacionSO1H
   793 000007BC 6689C3                  	mov	ebx, eax
   794 000007BF 6689DE                  	mov	esi, ebx
   795 000007C2 66C1CE04                	ror	esi, 4
   796 000007C6 8EDE                    	mov	ds, si
   797 000007C8 66C1EE1C                	shr	esi, 28
   798 000007CC 668B04                  	mov	eax, [si]
   799 000007CF 6683F801                	cmp	eax, 1
   800 000007D3 0F94C0                  	sete	al
   801 000007D6 660FB6C0                	movzx	eax, al
   802                                  ; JumpIfNotZero
   803 000007DA 6685C0                  	test	eax, eax
   804 000007DD 7523                    	jne	L20
   805                                  section .relod
   806 00000014 [E1070000]              	dd	L22
   807                                  section .text
   808 000007DF 66B8                    	db	0x66, 0xB8
   809                                  L22:
   810 000007E1 [00000000]              	dd	_enHalt
   811 000007E5 6689C3                  	mov	ebx, eax
   812 000007E8 6689DE                  	mov	esi, ebx
   813 000007EB 66C1CE04                	ror	esi, 4
   814 000007EF 8EDE                    	mov	ds, si
   815 000007F1 66C1EE1C                	shr	esi, 28
   816 000007F5 668B04                  	mov	eax, [si]
   817 000007F8 6685C0                  	test	eax, eax
   818 000007FB 0F95C0                  	setne	al
   819 000007FE 660FBEC0                	movsx	eax, al
   820                                  L20:
   821                                  ; JumpIfZero
   822 00000802 6685C0                  	test	eax, eax
   823 00000805 0F84CA00                	je	L18
   824                                  ; {
   825                                  ; if
   826                                  ; RPN'ized expression: "ccbAlEpilogo num -> *u 0 > "
   827                                  ; Expanded expression: "ccbAlEpilogo *(4) 0 + *(2) 0 > "
   828                                  ; Fused expression:    "ccbAlEpilogo + *ax 0 > *ax 0 IF! "
   829                                  section .relod
   830 00000018 [0B080000]              	dd	L25
   831                                  section .text
   832 00000809 66B8                    	db	0x66, 0xB8
   833                                  L25:
   834 0000080B [00000000]              	dd	_ccbAlEpilogo
   835 0000080F 6689C3                  	mov	ebx, eax
   836 00000812 6689DE                  	mov	esi, ebx
   837 00000815 66C1CE04                	ror	esi, 4
   838 00000819 8EDE                    	mov	ds, si
   839 0000081B 66C1EE1C                	shr	esi, 28
   840 0000081F 668B04                  	mov	eax, [si]
   841 00000822 6689C3                  	mov	ebx, eax
   842 00000825 6689DE                  	mov	esi, ebx
   843 00000828 66C1CE04                	ror	esi, 4
   844 0000082C 8EDE                    	mov	ds, si
   845 0000082E 66C1EE1C                	shr	esi, 28
   846 00000832 8B04                    	mov	ax, [si]
   847 00000834 660FB7C0                	movzx	eax, ax
   848 00000838 6683F800                	cmp	eax, 0
   849 0000083C 7E21                    	jle	L23
   850                                  ; RPN'ized expression: "( ccbAlEpilogo atenderCcb ) "
   851                                  ; Expanded expression: " ccbAlEpilogo *(4)  atenderCcb ()4 "
   852                                  ; Fused expression:    "( ccbAlEpilogo *(4) ax , atenderCcb )4 "
   853                                  section .relod
   854 0000001C [40080000]              	dd	L26
   855                                  section .text
   856 0000083E 66B8                    	db	0x66, 0xB8
   857                                  L26:
   858 00000840 [00000000]              	dd	_ccbAlEpilogo
   859 00000844 6689C3                  	mov	ebx, eax
   860 00000847 6689DE                  	mov	esi, ebx
   861 0000084A 66C1CE04                	ror	esi, 4
   862 0000084E 8EDE                    	mov	ds, si
   863 00000850 66C1EE1C                	shr	esi, 28
   864 00000854 66FF34                  	push	dword [si]
   865 00000857 9A                      	db	0x9A
   866                                  section .relot
   867 0000000C [58080000]              	dd	L27
   868                                  section .text
   869                                  L27:
   870 00000858 [00000000]              	dd	_atenderCcb
   871 0000085C 83ECFC                  	sub	sp, -4
   872                                  L23:
   873                                  ; if
   874                                  ; RPN'ized expression: "c2cPFR TUrgentes + *u &u numElem -> *u 0 > "
   875                                  ; Expanded expression: "c2cPFR 80 + 0 + *(4) 0 > "
   876                                  ; Fused expression:    "c2cPFR + ax 80 + ax 0 > *ax 0 IF! "
   877                                  section .relod
   878 00000020 [61080000]              	dd	L30
   879                                  section .text
   880 0000085F 66B8                    	db	0x66, 0xB8
   881                                  L30:
   882 00000861 [00000000]              	dd	_c2cPFR
   883 00000865 6683C050                	add	eax, 80
   884 00000869 6689C3                  	mov	ebx, eax
   885 0000086C 6689DE                  	mov	esi, ebx
   886 0000086F 66C1CE04                	ror	esi, 4
   887 00000873 8EDE                    	mov	ds, si
   888 00000875 66C1EE1C                	shr	esi, 28
   889 00000879 668B04                  	mov	eax, [si]
   890 0000087C 6683F800                	cmp	eax, 0
   891 00000880 7E05                    	jle	L28
   892                                  ; RPN'ized expression: "( prepararDesbloqueadosUrgentes ) "
   893                                  ; Expanded expression: " prepararDesbloqueadosUrgentes ()0 "
   894                                  ; Fused expression:    "( prepararDesbloqueadosUrgentes )0 "
   895 00000882 9A                      	db	0x9A
   896                                  section .relot
   897 00000010 [83080000]              	dd	L31
   898                                  section .text
   899                                  L31:
   900 00000883 [00000000]              	dd	_prepararDesbloqueadosUrgentes
   901                                  L28:
   902                                  ; if
   903                                  ; RPN'ized expression: "activarAlEpilogo1 "
   904                                  ; Expanded expression: "activarAlEpilogo1 *(4) "
   905                                  ; Fused expression:    "activarAlEpilogo1 *(4) ax  "
   906                                  section .relod
   907 00000024 [89080000]              	dd	L34
   908                                  section .text
   909 00000887 66B8                    	db	0x66, 0xB8
   910                                  L34:
   911 00000889 [00000000]              	dd	_activarAlEpilogo1
   912 0000088D 6689C3                  	mov	ebx, eax
   913 00000890 6689DE                  	mov	esi, ebx
   914 00000893 66C1CE04                	ror	esi, 4
   915 00000897 8EDE                    	mov	ds, si
   916 00000899 66C1EE1C                	shr	esi, 28
   917 0000089D 668B04                  	mov	eax, [si]
   918                                  ; JumpIfZero
   919 000008A0 6685C0                  	test	eax, eax
   920 000008A3 742E                    	je	L32
   921                                  ; {
   922                                  ; RPN'ized expression: "activarAlEpilogo1 FALSE = "
   923                                  ; Expanded expression: "activarAlEpilogo1 0 =(4) "
   924                                  ; Fused expression:    "activarAlEpilogo1 =(204) *ax 0 "
   925                                  section .relod
   926 00000028 [A7080000]              	dd	L35
   927                                  section .text
   928 000008A5 66B8                    	db	0x66, 0xB8
   929                                  L35:
   930 000008A7 [00000000]              	dd	_activarAlEpilogo1
   931 000008AB 6689C3                  	mov	ebx, eax
   932 000008AE 66B800000000            	mov	eax, 0
   933 000008B4 6689DE                  	mov	esi, ebx
   934 000008B7 66C1CE04                	ror	esi, 4
   935 000008BB 8EDE                    	mov	ds, si
   936 000008BD 66C1EE1C                	shr	esi, 28
   937 000008C1 668904                  	mov	[si], eax
   938                                  ; RPN'ized expression: "( ( sigThread ) activarThread ) "
   939                                  ; Expanded expression: "  sigThread ()0  activarThread ()4 "
   940                                  ; Fused expression:    "( ( sigThread )0 , activarThread )4 "
   941 000008C4 9A                      	db	0x9A
   942                                  section .relot
   943 00000014 [C5080000]              	dd	L36
   944                                  section .text
   945                                  L36:
   946 000008C5 [00000000]              	dd	_sigThread
   947 000008C9 6650                    	push	eax
   948 000008CB 9A                      	db	0x9A
   949                                  section .relot
   950 00000018 [CC080000]              	dd	L37
   951                                  section .text
   952                                  L37:
   953 000008CC [00000000]              	dd	_activarThread
   954 000008D0 83ECFC                  	sub	sp, -4
   955                                  ; }
   956                                  L32:
   957                                  ; }
   958                                  L18:
   959                                  ; if
   960                                  ; RPN'ized expression: "nivelActivacionSO1H --p 1 == "
   961                                  ; Expanded expression: "nivelActivacionSO1H --p(4) 1 == "
   962                                  ; Fused expression:    "nivelActivacionSO1H --p(4) *ax == ax 1 IF! "
   963                                  section .relod
   964 0000002C [D5080000]              	dd	L40
   965                                  section .text
   966 000008D3 66B8                    	db	0x66, 0xB8
   967                                  L40:
   968 000008D5 [00000000]              	dd	_nivelActivacionSO1H
   969 000008D9 6689C3                  	mov	ebx, eax
   970 000008DC 6689DE                  	mov	esi, ebx
   971 000008DF 66C1CE04                	ror	esi, 4
   972 000008E3 8EDE                    	mov	ds, si
   973 000008E5 66C1EE1C                	shr	esi, 28
   974 000008E9 668B04                  	mov	eax, [si]
   975 000008EC 66FF0C                  	dec	dword [si]
   976 000008EF 6683F801                	cmp	eax, 1
   977 000008F3 7544                    	jne	L38
   978                                  ; {
   979                                  ; RPN'ized expression: "( SP_Thread , SS_Thread setThreadStack ) "
   980                                  ; Expanded expression: " SP_Thread *(2)  SS_Thread *(2)  setThreadStack ()8 "
   981                                  ; Fused expression:    "( SP_Thread *(2) ax , SS_Thread *(2) ax , setThreadStack )8 "
   982                                  section .relod
   983 00000030 [F7080000]              	dd	L41
   984                                  section .text
   985 000008F5 66B8                    	db	0x66, 0xB8
   986                                  L41:
   987 000008F7 [00000000]              	dd	_SP_Thread
   988 000008FB 6689C3                  	mov	ebx, eax
   989 000008FE 6689DE                  	mov	esi, ebx
   990 00000901 66C1CE04                	ror	esi, 4
   991 00000905 8EDE                    	mov	ds, si
   992 00000907 66C1EE1C                	shr	esi, 28
   993 0000090B 8B04                    	mov	ax, [si]
   994 0000090D 660FB7C0                	movzx	eax, ax
   995 00000911 6650                    	push	eax
   996                                  section .relod
   997 00000034 [15090000]              	dd	L42
   998                                  section .text
   999 00000913 66B8                    	db	0x66, 0xB8
  1000                                  L42:
  1001 00000915 [00000000]              	dd	_SS_Thread
  1002 00000919 6689C3                  	mov	ebx, eax
  1003 0000091C 6689DE                  	mov	esi, ebx
  1004 0000091F 66C1CE04                	ror	esi, 4
  1005 00000923 8EDE                    	mov	ds, si
  1006 00000925 66C1EE1C                	shr	esi, 28
  1007 00000929 8B04                    	mov	ax, [si]
  1008 0000092B 660FB7C0                	movzx	eax, ax
  1009 0000092F 6650                    	push	eax
  1010 00000931 9A                      	db	0x9A
  1011                                  section .relot
  1012 0000001C [32090000]              	dd	L43
  1013                                  section .text
  1014                                  L43:
  1015 00000932 [00000000]              	dd	_setThreadStack
  1016 00000936 83ECF8                  	sub	sp, -8
  1017                                  ; }
  1018                                  L38:
  1019 00000939 1F                         pop ds 
  1020 0000093A 07                         pop es 
  1021 0000093B 6661                       popad  
  1022 0000093D CF                         iret   
  1023                                  
  1024                                  L4:
  1025 0000093E 66                      	db	0x66
  1026 0000093F C9                      	leave
  1027 00000940 CB                      	retf
  1028                                  L44:
  1029                                  
  1030                                  section .fxnsz
  1031 00000004 38090000                	dd	L44 - _envolvente_00
  1032                                  
  1033                                  ; glb inicTVI : (void) void
  1034                                  section .text
  1035                                  	global	_inicTVI
  1036                                  _inicTVI:
  1037 00000941 6655                    	push	ebp
  1038 00000943 660FB7EC                	movzx	ebp, sp
  1039 00000947 83EC04                  	 sub	sp,          4
  1040                                  ; loc     nVInt : (@-4): int
  1041                                  ; for
  1042                                  ; RPN'ized expression: "nVInt 0 = "
  1043                                  ; Expanded expression: "(@-4) 0 =(4) "
  1044                                  ; Fused expression:    "=(204) *(@-4) 0 "
  1045 0000094A 66B800000000            	mov	eax, 0
  1046 00000950 668946FC                	mov	[bp-4], eax
  1047                                  L47:
  1048                                  ; RPN'ized expression: "nVInt 256 < "
  1049                                  ; Expanded expression: "(@-4) *(4) 256 < "
  1050                                  ; Fused expression:    "< *(@-4) 256 IF! "
  1051 00000954 668B46FC                	mov	eax, [bp-4]
  1052 00000958 663D00010000            	cmp	eax, 256
  1053 0000095E 0F8DD500                	jge	L50
  1054                                  ; RPN'ized expression: "nVInt ++p "
  1055                                  ; Expanded expression: "(@-4) ++p(4) "
  1056                                  ; {
  1057                                  ; RPN'ized expression: "VIOrg nVInt + *u ptrTVI nVInt + *u = "
  1058                                  ; Expanded expression: "VIOrg (@-4) *(4) 4 * + ptrTVI *(4) (@-4) *(4) 4 * + *(4) =(4) "
  1059                                  ; Fused expression:    "VIOrg push-ax * *(@-4) 4 + *sp ax push-ax ptrTVI push-ax * *(@-4) 4 + **sp ax =(204) **sp *ax "
  1060                                  section .relod
  1061 00000038 [64090000]              	dd	L51
  1062                                  section .text
  1063 00000962 66B8                    	db	0x66, 0xB8
  1064                                  L51:
  1065 00000964 [00000000]              	dd	_VIOrg
  1066 00000968 6650                    	push	eax
  1067 0000096A 668B46FC                	mov	eax, [bp-4]
  1068 0000096E 666BC004                	imul	eax, eax, 4
  1069 00000972 6689C1                  	mov	ecx, eax
  1070 00000975 6658                    	pop	eax
  1071 00000977 6601C8                  	add	eax, ecx
  1072 0000097A 6650                    	push	eax
  1073                                  section .relod
  1074 0000003C [7E090000]              	dd	L52
  1075                                  section .text
  1076 0000097C 66B8                    	db	0x66, 0xB8
  1077                                  L52:
  1078 0000097E [00000000]              	dd	_ptrTVI
  1079 00000982 6650                    	push	eax
  1080 00000984 668B46FC                	mov	eax, [bp-4]
  1081 00000988 666BC004                	imul	eax, eax, 4
  1082 0000098C 6689C1                  	mov	ecx, eax
  1083 0000098F 665B                    	pop	ebx
  1084 00000991 6689DE                  	mov	esi, ebx
  1085 00000994 66C1CE04                	ror	esi, 4
  1086 00000998 8EDE                    	mov	ds, si
  1087 0000099A 66C1EE1C                	shr	esi, 28
  1088 0000099E 668B04                  	mov	eax, [si]
  1089 000009A1 6601C8                  	add	eax, ecx
  1090 000009A4 6689C3                  	mov	ebx, eax
  1091 000009A7 6689DE                  	mov	esi, ebx
  1092 000009AA 66C1CE04                	ror	esi, 4
  1093 000009AE 8EDE                    	mov	ds, si
  1094 000009B0 66C1EE1C                	shr	esi, 28
  1095 000009B4 668B04                  	mov	eax, [si]
  1096 000009B7 665B                    	pop	ebx
  1097 000009B9 6689DE                  	mov	esi, ebx
  1098 000009BC 66C1CE04                	ror	esi, 4
  1099 000009C0 8EDE                    	mov	ds, si
  1100 000009C2 66C1EE1C                	shr	esi, 28
  1101 000009C6 668904                  	mov	[si], eax
  1102                                  ; RPN'ized expression: "recVInt nVInt + *u 1 -u = "
  1103                                  ; Expanded expression: "recVInt (@-4) *(4) 4 * + -1 =(4) "
  1104                                  ; Fused expression:    "recVInt push-ax * *(@-4) 4 + *sp ax =(204) *ax -1 "
  1105                                  section .relod
  1106 00000040 [CB090000]              	dd	L53
  1107                                  section .text
  1108 000009C9 66B8                    	db	0x66, 0xB8
  1109                                  L53:
  1110 000009CB [00040000]              	dd	_recVInt
  1111 000009CF 6650                    	push	eax
  1112 000009D1 668B46FC                	mov	eax, [bp-4]
  1113 000009D5 666BC004                	imul	eax, eax, 4
  1114 000009D9 6689C1                  	mov	ecx, eax
  1115 000009DC 6658                    	pop	eax
  1116 000009DE 6601C8                  	add	eax, ecx
  1117 000009E1 6689C3                  	mov	ebx, eax
  1118 000009E4 66B8FFFFFFFF            	mov	eax, -1
  1119 000009EA 6689DE                  	mov	esi, ebx
  1120 000009ED 66C1CE04                	ror	esi, 4
  1121 000009F1 8EDE                    	mov	ds, si
  1122 000009F3 66C1EE1C                	shr	esi, 28
  1123 000009F7 668904                  	mov	[si], eax
  1124                                  ; loc         <something> : * (void) void
  1125                                  ; RPN'ized expression: "isr nVInt + *u isrNula (something54) = "
  1126                                  ; Expanded expression: "isr (@-4) *(4) 4 * + isrNula =(4) "
  1127                                  ; Fused expression:    "isr push-ax * *(@-4) 4 + *sp ax push-ax isrNula =(204) **sp ax "
  1128                                  section .relod
  1129 00000044 [FC090000]              	dd	L55
  1130                                  section .text
  1131 000009FA 66B8                    	db	0x66, 0xB8
  1132                                  L55:
  1133 000009FC [00080000]              	dd	_isr
  1134 00000A00 6650                    	push	eax
  1135 00000A02 668B46FC                	mov	eax, [bp-4]
  1136 00000A06 666BC004                	imul	eax, eax, 4
  1137 00000A0A 6689C1                  	mov	ecx, eax
  1138 00000A0D 6658                    	pop	eax
  1139 00000A0F 6601C8                  	add	eax, ecx
  1140 00000A12 6650                    	push	eax
  1141                                  section .relod
  1142 00000048 [160A0000]              	dd	L56
  1143                                  section .text
  1144 00000A14 66B8                    	db	0x66, 0xB8
  1145                                  L56:
  1146 00000A16 [00000000]              	dd	_isrNula
  1147 00000A1A 665B                    	pop	ebx
  1148 00000A1C 6689DE                  	mov	esi, ebx
  1149 00000A1F 66C1CE04                	ror	esi, 4
  1150 00000A23 8EDE                    	mov	ds, si
  1151 00000A25 66C1EE1C                	shr	esi, 28
  1152 00000A29 668904                  	mov	[si], eax
  1153                                  ; }
  1154                                  L48:
  1155                                  ; Fused expression:    "++p(4) *(@-4) "
  1156 00000A2C 668B46FC                	mov	eax, [bp-4]
  1157 00000A30 66FF46FC                	inc	dword [bp-4]
  1158 00000A34 E91DFF                  	jmp	L47
  1159                                  L50:
  1160                                  L45:
  1161 00000A37 66                      	db	0x66
  1162 00000A38 C9                      	leave
  1163 00000A39 CB                      	retf
  1164                                  L57:
  1165                                  
  1166                                  section .fxnsz
  1167 00000008 F9000000                	dd	L57 - _inicTVI
  1168                                  
  1169                                  ; glb redirigirInt : (
  1170                                  ; prm     nVInt : unsigned char
  1171                                  ; prm     isr_x : * (void) void
  1172                                  ;     ) void
  1173                                  section .text
  1174                                  	global	_redirigirInt
  1175                                  _redirigirInt:
  1176 00000A3A 6655                    	push	ebp
  1177 00000A3C 660FB7EC                	movzx	ebp, sp
  1178                                  	;sub	sp,          0
  1179                                  ; loc     nVInt : (@8): unsigned char
  1180                                  ; loc     isr_x : (@12): * (void) void
  1181                                  ; loc     <something> : * (void) void
  1182                                  ; loc     <something> : unsigned
  1183                                  ; loc     <something> : unsigned short
  1184                                  ; loc     <something> : unsigned
  1185                                  ; loc     <something> : unsigned short
  1186                                  ; loc     <something> : unsigned
  1187                                  ; loc     <something> : unsigned
  1188                                  ; loc     <something> : unsigned
  1189                                  ; RPN'ized expression: "ptrTVI nVInt + *u _start__text &u (something63) 4 >> (something62) (something61) 16 << envolvente_00 &u (something65) 6 + nVInt 7 * (something66) + _start__text &u (something67) - (something6
  1190                                  ; Expanded expression: "ptrTVI *(4) (@8) *(1) 4 * + _start__text 4 >>u unsigned short 16 << envolvente_00 6 + (@8) *(1) 7 * + _start__text - unsigned short | =(4) "
  1191                                  ; Fused expression:    "ptrTVI push-ax * *(@8) 4 + **sp ax push-ax _start__text >>u ax 4 unsigned short << ax 16 push-ax envolvente_00 + ax 6 push-ax * *(@8) 7 + *sp ax push-ax _start__text - *sp ax unsigned short |
  1192                                  section .relod
  1193 0000004C [420A0000]              	dd	L68
  1194                                  section .text
  1195 00000A40 66B8                    	db	0x66, 0xB8
  1196                                  L68:
  1197 00000A42 [00000000]              	dd	_ptrTVI
  1198 00000A46 6650                    	push	eax
  1199 00000A48 8A4608                  	mov	al, [bp+8]
  1200 00000A4B 660FB6C0                	movzx	eax, al
  1201 00000A4F 666BC004                	imul	eax, eax, 4
  1202 00000A53 6689C1                  	mov	ecx, eax
  1203 00000A56 665B                    	pop	ebx
  1204 00000A58 6689DE                  	mov	esi, ebx
  1205 00000A5B 66C1CE04                	ror	esi, 4
  1206 00000A5F 8EDE                    	mov	ds, si
  1207 00000A61 66C1EE1C                	shr	esi, 28
  1208 00000A65 668B04                  	mov	eax, [si]
  1209 00000A68 6601C8                  	add	eax, ecx
  1210 00000A6B 6650                    	push	eax
  1211                                  section .relod
  1212 00000050 [6F0A0000]              	dd	L69
  1213                                  section .text
  1214 00000A6D 66B8                    	db	0x66, 0xB8
  1215                                  L69:
  1216 00000A6F [00000000]              	dd	__start__text
  1217 00000A73 66C1E804                	shr	eax, 4
  1218 00000A77 660FB7C0                	movzx	eax, ax
  1219 00000A7B 66C1E010                	shl	eax, 16
  1220 00000A7F 6650                    	push	eax
  1221                                  section .relod
  1222 00000054 [830A0000]              	dd	L70
  1223                                  section .text
  1224 00000A81 66B8                    	db	0x66, 0xB8
  1225                                  L70:
  1226 00000A83 [09000000]              	dd	_envolvente_00
  1227 00000A87 6683C006                	add	eax, 6
  1228 00000A8B 6650                    	push	eax
  1229 00000A8D 8A4608                  	mov	al, [bp+8]
  1230 00000A90 660FB6C0                	movzx	eax, al
  1231 00000A94 666BC007                	imul	eax, eax, 7
  1232 00000A98 6689C1                  	mov	ecx, eax
  1233 00000A9B 6658                    	pop	eax
  1234 00000A9D 6601C8                  	add	eax, ecx
  1235 00000AA0 6650                    	push	eax
  1236                                  section .relod
  1237 00000058 [A40A0000]              	dd	L71
  1238                                  section .text
  1239 00000AA2 66B8                    	db	0x66, 0xB8
  1240                                  L71:
  1241 00000AA4 [00000000]              	dd	__start__text
  1242 00000AA8 6689C1                  	mov	ecx, eax
  1243 00000AAB 6658                    	pop	eax
  1244 00000AAD 6629C8                  	sub	eax, ecx
  1245 00000AB0 660FB7C0                	movzx	eax, ax
  1246 00000AB4 6689C1                  	mov	ecx, eax
  1247 00000AB7 6658                    	pop	eax
  1248 00000AB9 6609C8                  	or	eax, ecx
  1249 00000ABC 665B                    	pop	ebx
  1250 00000ABE 6689DE                  	mov	esi, ebx
  1251 00000AC1 66C1CE04                	ror	esi, 4
  1252 00000AC5 8EDE                    	mov	ds, si
  1253 00000AC7 66C1EE1C                	shr	esi, 28
  1254 00000ACB 668904                  	mov	[si], eax
  1255                                  ; RPN'ized expression: "isr nVInt + *u isr_x = "
  1256                                  ; Expanded expression: "isr (@8) *(1) 4 * + (@12) *(4) =(4) "
  1257                                  ; Fused expression:    "isr push-ax * *(@8) 4 + *sp ax =(204) *ax *(@12) "
  1258                                  section .relod
  1259 0000005C [D00A0000]              	dd	L72
  1260                                  section .text
  1261 00000ACE 66B8                    	db	0x66, 0xB8
  1262                                  L72:
  1263 00000AD0 [00080000]              	dd	_isr
  1264 00000AD4 6650                    	push	eax
  1265 00000AD6 8A4608                  	mov	al, [bp+8]
  1266 00000AD9 660FB6C0                	movzx	eax, al
  1267 00000ADD 666BC004                	imul	eax, eax, 4
  1268 00000AE1 6689C1                  	mov	ecx, eax
  1269 00000AE4 6658                    	pop	eax
  1270 00000AE6 6601C8                  	add	eax, ecx
  1271 00000AE9 6689C3                  	mov	ebx, eax
  1272 00000AEC 668B460C                	mov	eax, [bp+12]
  1273 00000AF0 6689DE                  	mov	esi, ebx
  1274 00000AF3 66C1CE04                	ror	esi, 4
  1275 00000AF7 8EDE                    	mov	ds, si
  1276 00000AF9 66C1EE1C                	shr	esi, 28
  1277 00000AFD 668904                  	mov	[si], eax
  1278                                  L58:
  1279 00000B00 66                      	db	0x66
  1280 00000B01 C9                      	leave
  1281 00000B02 CB                      	retf
  1282                                  L73:
  1283                                  
  1284                                  section .fxnsz
  1285 0000000C C9000000                	dd	L73 - _redirigirInt
  1286                                  
  1287                                  ; glb redirigirIntHardware : (
  1288                                  ; prm     irq : unsigned char
  1289                                  ; prm     isr : * (void) void
  1290                                  ;     ) void
  1291                                  section .text
  1292                                  	global	_redirigirIntHardware
  1293                                  _redirigirIntHardware:
  1294 00000B03 6655                    	push	ebp
  1295 00000B05 660FB7EC                	movzx	ebp, sp
  1296 00000B09 83EC04                  	 sub	sp,          4
  1297                                  ; loc     irq : (@8): unsigned char
  1298                                  ; loc     isr : (@12): * (void) void
  1299                                  ; loc     nVInt : (@-4): unsigned char
  1300                                  ; if
  1301                                  ; RPN'ized expression: "irq 8 < "
  1302                                  ; Expanded expression: "(@8) *(1) 8 < "
  1303                                  ; Fused expression:    "< *(@8) 8 IF! "
  1304 00000B0C 8A4608                  	mov	al, [bp+8]
  1305 00000B0F 660FB6C0                	movzx	eax, al
  1306 00000B13 6683F808                	cmp	eax, 8
  1307 00000B17 7D2D                    	jge	L76
  1308                                  ; {
  1309                                  ; RPN'ized expression: "( 1 irq << unmask_pic1 ) "
  1310                                  ; Expanded expression: " 1 (@8) *(1) <<  unmask_pic1 ()4 "
  1311                                  ; Fused expression:    "( << 1 *(@8) , unmask_pic1 )4 "
  1312 00000B19 66B801000000            	mov	eax, 1
  1313 00000B1F 8A4E08                  	mov	cl, [bp+8]
  1314 00000B22 66D3E0                  	shl	eax, cl
  1315 00000B25 6650                    	push	eax
  1316 00000B27 9A                      	db	0x9A
  1317                                  section .relot
  1318 00000020 [280B0000]              	dd	L78
  1319                                  section .text
  1320                                  L78:
  1321 00000B28 [00000000]              	dd	_unmask_pic1
  1322 00000B2C 83ECFC                  	sub	sp, -4
  1323                                  ; RPN'ized expression: "nVInt 8 irq + = "
  1324                                  ; Expanded expression: "(@-4) 8 (@8) *(1) + =(1) "
  1325                                  ; Fused expression:    "+ 8 *(@8) =(156) *(@-4) ax "
  1326 00000B2F 66B808000000            	mov	eax, 8
  1327 00000B35 660FB64E08              	movzx	ecx, byte [bp+8]
  1328 00000B3A 6601C8                  	add	eax, ecx
  1329 00000B3D 8846FC                  	mov	[bp-4], al
  1330 00000B40 660FB6C0                	movzx	eax, al
  1331                                  ; }
  1332 00000B44 EB45                    	jmp	L77
  1333                                  L76:
  1334                                  ; else
  1335                                  ; {
  1336                                  ; RPN'ized expression: "( 1 2 << unmask_pic1 ) "
  1337                                  ; Expanded expression: " 4  unmask_pic1 ()4 "
  1338                                  ; Fused expression:    "( 4 , unmask_pic1 )4 "
  1339 00000B46 666A04                  	push	dword 4
  1340 00000B49 9A                      	db	0x9A
  1341                                  section .relot
  1342 00000024 [4A0B0000]              	dd	L79
  1343                                  section .text
  1344                                  L79:
  1345 00000B4A [00000000]              	dd	_unmask_pic1
  1346 00000B4E 83ECFC                  	sub	sp, -4
  1347                                  ; RPN'ized expression: "( 1 irq 8 - << unmask_pic2 ) "
  1348                                  ; Expanded expression: " 1 (@8) *(1) 8 - <<  unmask_pic2 ()4 "
  1349                                  ; Fused expression:    "( - *(@8) 8 << 1 ax , unmask_pic2 )4 "
  1350 00000B51 8A4608                  	mov	al, [bp+8]
  1351 00000B54 660FB6C0                	movzx	eax, al
  1352 00000B58 6683E808                	sub	eax, 8
  1353 00000B5C 6689C1                  	mov	ecx, eax
  1354 00000B5F 66B801000000            	mov	eax, 1
  1355 00000B65 66D3E0                  	shl	eax, cl
  1356 00000B68 6650                    	push	eax
  1357 00000B6A 9A                      	db	0x9A
  1358                                  section .relot
  1359 00000028 [6B0B0000]              	dd	L80
  1360                                  section .text
  1361                                  L80:
  1362 00000B6B [00000000]              	dd	_unmask_pic2
  1363 00000B6F 83ECFC                  	sub	sp, -4
  1364                                  ; RPN'ized expression: "nVInt 112 irq + 8 - = "
  1365                                  ; Expanded expression: "(@-4) 112 (@8) *(1) + 8 - =(1) "
  1366                                  ; Fused expression:    "+ 112 *(@8) - ax 8 =(156) *(@-4) ax "
  1367 00000B72 66B870000000            	mov	eax, 112
  1368 00000B78 660FB64E08              	movzx	ecx, byte [bp+8]
  1369 00000B7D 6601C8                  	add	eax, ecx
  1370 00000B80 6683E808                	sub	eax, 8
  1371 00000B84 8846FC                  	mov	[bp-4], al
  1372 00000B87 660FB6C0                	movzx	eax, al
  1373                                  ; }
  1374                                  L77:
  1375                                  ; RPN'ized expression: "( isr , nVInt redirigirInt ) "
  1376                                  ; Expanded expression: " (@12) *(4)  (@-4) *(1)  redirigirInt ()8 "
  1377                                  ; Fused expression:    "( *(4) (@12) , *(1) (@-4) , redirigirInt )8 "
  1378 00000B8B 66FF760C                	push	dword [bp+12]
  1379 00000B8F 8A46FC                  	mov	al, [bp-4]
  1380 00000B92 660FB6C0                	movzx	eax, al
  1381 00000B96 6650                    	push	eax
  1382 00000B98 9A                      	db	0x9A
  1383                                  section .relot
  1384 0000002C [990B0000]              	dd	L81
  1385                                  section .text
  1386                                  L81:
  1387 00000B99 [3A0A0000]              	dd	_redirigirInt
  1388 00000B9D 83ECF8                  	sub	sp, -8
  1389                                  L74:
  1390 00000BA0 66                      	db	0x66
  1391 00000BA1 C9                      	leave
  1392 00000BA2 CB                      	retf
  1393                                  L82:
  1394                                  
  1395                                  section .fxnsz
  1396 00000010 A0000000                	dd	L82 - _redirigirIntHardware
  1397                                  
  1398                                  ; glb restablecerInt : (
  1399                                  ; prm     nVInt : int
  1400                                  ;     ) void
  1401                                  section .text
  1402                                  	global	_restablecerInt
  1403                                  _restablecerInt:
  1404 00000BA3 6655                    	push	ebp
  1405 00000BA5 660FB7EC                	movzx	ebp, sp
  1406                                  	;sub	sp,          0
  1407                                  ; loc     nVInt : (@8): int
  1408                                  ; RPN'ized expression: "ptrTVI nVInt + *u VIOrg nVInt + *u = "
  1409                                  ; Expanded expression: "ptrTVI *(4) (@8) *(4) 4 * + VIOrg (@8) *(4) 4 * + *(4) =(4) "
  1410                                  ; Fused expression:    "ptrTVI push-ax * *(@8) 4 + **sp ax push-ax VIOrg push-ax * *(@8) 4 + *sp ax =(204) **sp *ax "
  1411                                  section .relod
  1412 00000060 [AB0B0000]              	dd	L85
  1413                                  section .text
  1414 00000BA9 66B8                    	db	0x66, 0xB8
  1415                                  L85:
  1416 00000BAB [00000000]              	dd	_ptrTVI
  1417 00000BAF 6650                    	push	eax
  1418 00000BB1 668B4608                	mov	eax, [bp+8]
  1419 00000BB5 666BC004                	imul	eax, eax, 4
  1420 00000BB9 6689C1                  	mov	ecx, eax
  1421 00000BBC 665B                    	pop	ebx
  1422 00000BBE 6689DE                  	mov	esi, ebx
  1423 00000BC1 66C1CE04                	ror	esi, 4
  1424 00000BC5 8EDE                    	mov	ds, si
  1425 00000BC7 66C1EE1C                	shr	esi, 28
  1426 00000BCB 668B04                  	mov	eax, [si]
  1427 00000BCE 6601C8                  	add	eax, ecx
  1428 00000BD1 6650                    	push	eax
  1429                                  section .relod
  1430 00000064 [D50B0000]              	dd	L86
  1431                                  section .text
  1432 00000BD3 66B8                    	db	0x66, 0xB8
  1433                                  L86:
  1434 00000BD5 [00000000]              	dd	_VIOrg
  1435 00000BD9 6650                    	push	eax
  1436 00000BDB 668B4608                	mov	eax, [bp+8]
  1437 00000BDF 666BC004                	imul	eax, eax, 4
  1438 00000BE3 6689C1                  	mov	ecx, eax
  1439 00000BE6 6658                    	pop	eax
  1440 00000BE8 6601C8                  	add	eax, ecx
  1441 00000BEB 6689C3                  	mov	ebx, eax
  1442 00000BEE 6689DE                  	mov	esi, ebx
  1443 00000BF1 66C1CE04                	ror	esi, 4
  1444 00000BF5 8EDE                    	mov	ds, si
  1445 00000BF7 66C1EE1C                	shr	esi, 28
  1446 00000BFB 668B04                  	mov	eax, [si]
  1447 00000BFE 665B                    	pop	ebx
  1448 00000C00 6689DE                  	mov	esi, ebx
  1449 00000C03 66C1CE04                	ror	esi, 4
  1450 00000C07 8EDE                    	mov	ds, si
  1451 00000C09 66C1EE1C                	shr	esi, 28
  1452 00000C0D 668904                  	mov	[si], eax
  1453                                  ; loc     <something> : * (void) void
  1454                                  ; RPN'ized expression: "isr nVInt + *u isrNula (something87) = "
  1455                                  ; Expanded expression: "isr (@8) *(4) 4 * + isrNula =(4) "
  1456                                  ; Fused expression:    "isr push-ax * *(@8) 4 + *sp ax push-ax isrNula =(204) **sp ax "
  1457                                  section .relod
  1458 00000068 [120C0000]              	dd	L88
  1459                                  section .text
  1460 00000C10 66B8                    	db	0x66, 0xB8
  1461                                  L88:
  1462 00000C12 [00080000]              	dd	_isr
  1463 00000C16 6650                    	push	eax
  1464 00000C18 668B4608                	mov	eax, [bp+8]
  1465 00000C1C 666BC004                	imul	eax, eax, 4
  1466 00000C20 6689C1                  	mov	ecx, eax
  1467 00000C23 6658                    	pop	eax
  1468 00000C25 6601C8                  	add	eax, ecx
  1469 00000C28 6650                    	push	eax
  1470                                  section .relod
  1471 0000006C [2C0C0000]              	dd	L89
  1472                                  section .text
  1473 00000C2A 66B8                    	db	0x66, 0xB8
  1474                                  L89:
  1475 00000C2C [00000000]              	dd	_isrNula
  1476 00000C30 665B                    	pop	ebx
  1477 00000C32 6689DE                  	mov	esi, ebx
  1478 00000C35 66C1CE04                	ror	esi, 4
  1479 00000C39 8EDE                    	mov	ds, si
  1480 00000C3B 66C1EE1C                	shr	esi, 28
  1481 00000C3F 668904                  	mov	[si], eax
  1482                                  L83:
  1483 00000C42 66                      	db	0x66
  1484 00000C43 C9                      	leave
  1485 00000C44 CB                      	retf
  1486                                  L90:
  1487                                  
  1488                                  section .fxnsz
  1489 00000014 A2000000                	dd	L90 - _restablecerInt
  1490                                  
  1491                                  
  1492                                  	extern	_nivelActivacionSO1H
  1493                                  	extern	_setKernelStack
  1494                                  	extern	_nVIntActual
  1495                                  	extern	_reg_DL
  1496                                  	extern	_enHalt
  1497                                  	extern	_ccbAlEpilogo
  1498                                  	extern	_atenderCcb
  1499                                  	extern	_c2cPFR
  1500                                  	extern	_prepararDesbloqueadosUrgentes
  1501                                  	extern	_activarAlEpilogo1
  1502                                  	extern	_sigThread
  1503                                  	extern	_activarThread
  1504                                  	extern	_SP_Thread
  1505                                  	extern	_SS_Thread
  1506                                  	extern	_setThreadStack
  1507                                  	extern	_ptrTVI
  1508                                  	extern	__start__text
  1509                                  	extern	_unmask_pic1
  1510                                  	extern	_unmask_pic2
  1511                                  
  1512                                  ; Syntax/declaration table/stack:
  1513                                  ; Bytes used: 12295/40960
  1514                                  
  1515                                  
  1516                                  ; Macro table:
  1517                                  ; Macro __SMALLER_C__ = `0x0100`
  1518                                  ; Macro __SMALLER_C_32__ = ``
  1519                                  ; Macro __HUGE__ = ``
  1520                                  ; Macro __SMALLER_C_SCHAR__ = ``
  1521                                  ; Bytes used: 74/5120
  1522                                  
  1523                                  
  1524                                  ; Identifier table:
  1525                                  ; Ident __floatsisf
  1526                                  ; Ident __floatunsisf
  1527                                  ; Ident __fixsfsi
  1528                                  ; Ident __fixunssfsi
  1529                                  ; Ident __addsf3
  1530                                  ; Ident __subsf3
  1531                                  ; Ident __negsf2
  1532                                  ; Ident __mulsf3
  1533                                  ; Ident __divsf3
  1534                                  ; Ident __lesf2
  1535                                  ; Ident __gesf2
  1536                                  ; Ident intptr_t
  1537                                  ; Ident uintptr_t
  1538                                  ; Ident intmax_t
  1539                                  ; Ident uintmax_t
  1540                                  ; Ident int8_t
  1541                                  ; Ident int_least8_t
  1542                                  ; Ident int_fast8_t
  1543                                  ; Ident uint8_t
  1544                                  ; Ident uint_least8_t
  1545                                  ; Ident uint_fast8_t
  1546                                  ; Ident int16_t
  1547                                  ; Ident int_least16_t
  1548                                  ; Ident int_fast16_t
  1549                                  ; Ident uint16_t
  1550                                  ; Ident uint_least16_t
  1551                                  ; Ident uint_fast16_t
  1552                                  ; Ident int32_t
  1553                                  ; Ident int_least32_t
  1554                                  ; Ident int_fast32_t
  1555                                  ; Ident uint32_t
  1556                                  ; Ident uint_least32_t
  1557                                  ; Ident uint_fast32_t
  1558                                  ; Ident <something>
  1559                                  ; Ident quot
  1560                                  ; Ident rem
  1561                                  ; Ident imaxdiv_t
  1562                                  ; Ident FALSE
  1563                                  ; Ident TRUE
  1564                                  ; Ident bool_t
  1565                                  ; Ident pointer_t
  1566                                  ; Ident funcion_t
  1567                                  ; Ident manejador_t
  1568                                  ; Ident rti_t
  1569                                  ; Ident isr_t
  1570                                  ; Ident handler_t
  1571                                  ; Ident retardarThread_t
  1572                                  ; Ident ptrTVI_t
  1573                                  ; Ident modoSO1_Bin
  1574                                  ; Ident modoSO1_Exe
  1575                                  ; Ident modoSO1_Bs
  1576                                  ; Ident modoSO1_t
  1577                                  ; Ident lo
  1578                                  ; Ident hi
  1579                                  ; Ident lh_t
  1580                                  ; Ident offset
  1581                                  ; Ident segment
  1582                                  ; Ident address_t
  1583                                  ; Ident ptr
  1584                                  ; Ident adr
  1585                                  ; Ident uPtrAdr_t
  1586                                  ; Ident pid_t
  1587                                  ; Ident tid_t
  1588                                  ; Ident uid_t
  1589                                  ; Ident gid_t
  1590                                  ; Ident pindx_t
  1591                                  ; Ident tindx_t
  1592                                  ; Ident df_t
  1593                                  ; Ident dfs_t
  1594                                  ; Ident rindx_t
  1595                                  ; Ident inportb
  1596                                  ; Ident port
  1597                                  ; Ident inport
  1598                                  ; Ident outport
  1599                                  ; Ident val
  1600                                  ; Ident outportb
  1601                                  ; Ident inportb_r
  1602                                  ; Ident outportb_r
  1603                                  ; Ident contadorTimer0
  1604                                  ; Ident ptrTVI
  1605                                  ; Ident valorIMR
  1606                                  ; Ident establecerIMR
  1607                                  ; Ident nuevoIMR
  1608                                  ; Ident mask_pic1
  1609                                  ; Ident irq
  1610                                  ; Ident mask_pic2
  1611                                  ; Ident unmask_pic1
  1612                                  ; Ident unmask_pic2
  1613                                  ; Ident get_pic1_isr
  1614                                  ; Ident get_pic2_isr
  1615                                  ; Ident set_pics
  1616                                  ; Ident irq0
  1617                                  ; Ident irq8
  1618                                  ; Ident pic_setup
  1619                                  ; Ident enable_hwirq
  1620                                  ; Ident hwirq
  1621                                  ; Ident rti
  1622                                  ; Ident _start__text
  1623                                  ; Ident _stop__text
  1624                                  ; Ident _start__rodata
  1625                                  ; Ident _stop__rodata
  1626                                  ; Ident _start__data
  1627                                  ; Ident _stop__data
  1628                                  ; Ident _start__bss
  1629                                  ; Ident _stop__bss
  1630                                  ; Ident _start_allcode__
  1631                                  ; Ident _stop_allcode__
  1632                                  ; Ident _start_alldata__
  1633                                  ; Ident _stop_alldata__
  1634                                  ; Ident mostrarSeccion
  1635                                  ; Ident start
  1636                                  ; Ident stop
  1637                                  ; Ident descripcion
  1638                                  ; Ident mostrarSecciones
  1639                                  ; Ident modoAp_t
  1640                                  ; Ident DS
  1641                                  ; Ident ES
  1642                                  ; Ident EDI
  1643                                  ; Ident ESI
  1644                                  ; Ident EBP
  1645                                  ; Ident ESP
  1646                                  ; Ident EBX
  1647                                  ; Ident EDX
  1648                                  ; Ident ECX
  1649                                  ; Ident EAX
  1650                                  ; Ident IP
  1651                                  ; Ident CS
  1652                                  ; Ident Flags
  1653                                  ; Ident tramaDWords_t
  1654                                  ; Ident DI
  1655                                  ; Ident rDI
  1656                                  ; Ident SI
  1657                                  ; Ident rSI
  1658                                  ; Ident BP
  1659                                  ; Ident rBP
  1660                                  ; Ident SP
  1661                                  ; Ident rSP
  1662                                  ; Ident BX
  1663                                  ; Ident rBX
  1664                                  ; Ident DX
  1665                                  ; Ident rDX
  1666                                  ; Ident CX
  1667                                  ; Ident rCX
  1668                                  ; Ident AX
  1669                                  ; Ident rAX
  1670                                  ; Ident tramaWords_t
  1671                                  ; Ident BL
  1672                                  ; Ident BH
  1673                                  ; Ident rB
  1674                                  ; Ident DL
  1675                                  ; Ident DH
  1676                                  ; Ident rD
  1677                                  ; Ident CL
  1678                                  ; Ident CH
  1679                                  ; Ident rC
  1680                                  ; Ident AL
  1681                                  ; Ident AH
  1682                                  ; Ident rA
  1683                                  ; Ident tramaBytes_t
  1684                                  ; Ident td
  1685                                  ; Ident tw
  1686                                  ; Ident tb
  1687                                  ; Ident trama_t
  1688                                  ; Ident tam
  1689                                  ; Ident sig
  1690                                  ; Ident ant
  1691                                  ; Ident aux
  1692                                  ; Ident relleno
  1693                                  ; Ident bloque_t
  1694                                  ; Ident ptrBloque_t
  1695                                  ; Ident cab
  1696                                  ; Ident dobleEnlace_t
  1697                                  ; Ident numElem
  1698                                  ; Ident primero
  1699                                  ; Ident cabecera
  1700                                  ; Ident e
  1701                                  ; Ident c2c_t
  1702                                  ; Ident posicionC2c
  1703                                  ; Ident i
  1704                                  ; Ident c2c
  1705                                  ; Ident eliminarC2c
  1706                                  ; Ident apilarC2c
  1707                                  ; Ident encolarC2c
  1708                                  ; Ident desencolarC2c
  1709                                  ; Ident inicializarC2c
  1710                                  ; Ident compartida
  1711                                  ; Ident ptrC2c_t
  1712                                  ; Ident posicionPC2c
  1713                                  ; Ident eliminarPC2c
  1714                                  ; Ident ptrC2c
  1715                                  ; Ident apilarPC2c
  1716                                  ; Ident encolarPC2c
  1717                                  ; Ident desencolarPC2c
  1718                                  ; Ident inicializarPC2c
  1719                                  ; Ident callBack_t
  1720                                  ; Ident arg
  1721                                  ; Ident num
  1722                                  ; Ident in
  1723                                  ; Ident out
  1724                                  ; Ident max
  1725                                  ; Ident callBack
  1726                                  ; Ident descCcb_t
  1727                                  ; Ident ccb_t
  1728                                  ; Ident inicCcb
  1729                                  ; Ident ccb
  1730                                  ; Ident encolarCcb
  1731                                  ; Ident cb
  1732                                  ; Ident desencolarCcb
  1733                                  ; Ident eliminarCcb
  1734                                  ; Ident eliminarSegCcb
  1735                                  ; Ident segmento
  1736                                  ; Ident vaciarCcb
  1737                                  ; Ident atenderCcb
  1738                                  ; Ident libre
  1739                                  ; Ident preparado
  1740                                  ; Ident ejecutandose
  1741                                  ; Ident bloqueado
  1742                                  ; Ident estado_t
  1743                                  ; Ident modoAp
  1744                                  ; Ident dfs
  1745                                  ; Ident pos
  1746                                  ; Ident dfa_t
  1747                                  ; Ident pid
  1748                                  ; Ident noStatus
  1749                                  ; Ident status
  1750                                  ; Ident ppindx
  1751                                  ; Ident hpindx
  1752                                  ; Ident c2cHijos
  1753                                  ; Ident c2cThreads
  1754                                  ; Ident CSProc
  1755                                  ; Ident tamCodigo
  1756                                  ; Ident desplBSS
  1757                                  ; Ident desplPila
  1758                                  ; Ident tamFichero
  1759                                  ; Ident programa
  1760                                  ; Ident comando
  1761                                  ; Ident nfa
  1762                                  ; Ident tfa
  1763                                  ; Ident uid
  1764                                  ; Ident gid
  1765                                  ; Ident descProceso_t
  1766                                  ; Ident tid
  1767                                  ; Ident estado
  1768                                  ; Ident esperandoPor
  1769                                  ; Ident trama
  1770                                  ; Ident ptindx
  1771                                  ; Ident htindx
  1772                                  ; Ident pindx
  1773                                  ; Ident SSThread
  1774                                  ; Ident SP0
  1775                                  ; Ident descThread_t
  1776                                  ; Ident flibre
  1777                                  ; Ident fRegular
  1778                                  ; Ident fedBloques
  1779                                  ; Ident fedCaracteres
  1780                                  ; Ident tuberia
  1781                                  ; Ident tipoFichero_t
  1782                                  ; Ident tipo
  1783                                  ; Ident nombre
  1784                                  ; Ident rindx
  1785                                  ; Ident menor
  1786                                  ; Ident shareMode
  1787                                  ; Ident contAp_L
  1788                                  ; Ident contAp_E
  1789                                  ; Ident descFichero_t
  1790                                  ; Ident rLibre
  1791                                  ; Ident rDCaracteres
  1792                                  ; Ident rDBloques
  1793                                  ; Ident rTuberia
  1794                                  ; Ident rGP
  1795                                  ; Ident rGM
  1796                                  ; Ident rSF
  1797                                  ; Ident rOtro
  1798                                  ; Ident tipoRecurso_t
  1799                                  ; Ident open_t
  1800                                  ; Ident modo
  1801                                  ; Ident release_t
  1802                                  ; Ident read_t
  1803                                  ; Ident dir
  1804                                  ; Ident nbytes
  1805                                  ; Ident aio_read_t
  1806                                  ; Ident write_t
  1807                                  ; Ident aio_write_t
  1808                                  ; Ident lseek_t
  1809                                  ; Ident whence
  1810                                  ; Ident fcntl_t
  1811                                  ; Ident cmd
  1812                                  ; Ident ioctl_t
  1813                                  ; Ident request
  1814                                  ; Ident eliminar_t
  1815                                  ; Ident tindx
  1816                                  ; Ident c2cFichRec
  1817                                  ; Ident numVI
  1818                                  ; Ident nVInt
  1819                                  ; Ident isr
  1820                                  ; Ident open
  1821                                  ; Ident release
  1822                                  ; Ident read
  1823                                  ; Ident aio_read
  1824                                  ; Ident write
  1825                                  ; Ident aio_write
  1826                                  ; Ident lseek
  1827                                  ; Ident fcntl
  1828                                  ; Ident ioctl
  1829                                  ; Ident eliminar
  1830                                  ; Ident descRecurso_t
  1831                                  ; Ident SP0_So1
  1832                                  ; Ident IMR
  1833                                  ; Ident modoSO1
  1834                                  ; Ident ptrDebugWord
  1835                                  ; Ident info_t
  1836                                  ; Ident signatura
  1837                                  ; Ident bytesUltSector
  1838                                  ; Ident sectores
  1839                                  ; Ident numDirReub
  1840                                  ; Ident numParCabecera
  1841                                  ; Ident minAlloc
  1842                                  ; Ident maxAlloc
  1843                                  ; Ident SS0
  1844                                  ; Ident checkSum
  1845                                  ; Ident IP0
  1846                                  ; Ident CS0
  1847                                  ; Ident offTablaReub
  1848                                  ; Ident numOverlay
  1849                                  ; Ident cabecera_t
  1850                                  ; Ident Libres
  1851                                  ; Ident Ocupados
  1852                                  ; Ident e2DescProceso
  1853                                  ; Ident e2DescThread
  1854                                  ; Ident e2DescFichero
  1855                                  ; Ident e2DescRecurso
  1856                                  ; Ident e2Hijos
  1857                                  ; Ident e2Threads
  1858                                  ; Ident e2Preparados
  1859                                  ; Ident e2Urgentes
  1860                                  ; Ident e2POrdenados
  1861                                  ; Ident e2TDormidos
  1862                                  ; Ident e2FichRec
  1863                                  ; Ident e2PFR_t
  1864                                  ; Ident DPLibres
  1865                                  ; Ident DPOcupados
  1866                                  ; Ident DTLibres
  1867                                  ; Ident DTOcupados
  1868                                  ; Ident TPreparados
  1869                                  ; Ident TUrgentes
  1870                                  ; Ident POrdenados
  1871                                  ; Ident TDormidos
  1872                                  ; Ident DFLibres
  1873                                  ; Ident DFOcupados
  1874                                  ; Ident DRLibres
  1875                                  ; Ident DROcupados
  1876                                  ; Ident numColasPFR
  1877                                  ; Ident cPFR_t
  1878                                  ; Ident sigThread_t
  1879                                  ; Ident activarThread_t
  1880                                  ; Ident buscarNuevoThreadActual_t
  1881                                  ; Ident bloquearThreadActual_t
  1882                                  ; Ident ptrIndProcesoActual
  1883                                  ; Ident ptrIndThreadActual
  1884                                  ; Ident ptrTramaThread
  1885                                  ; Ident ptrActivarAlEpilogo
  1886                                  ; Ident ptrDescProceso
  1887                                  ; Ident tamDescProceso
  1888                                  ; Ident ptrDescThread
  1889                                  ; Ident tamDescThread
  1890                                  ; Ident ptrDescFichero
  1891                                  ; Ident ptrDescRecurso
  1892                                  ; Ident ptrC2cPFR
  1893                                  ; Ident ptrE2PFR
  1894                                  ; Ident ptrNivelActivacionSO1H
  1895                                  ; Ident ptrEnHalt
  1896                                  ; Ident ptrHayTic
  1897                                  ; Ident ptrCcbAlEpilogo
  1898                                  ; Ident ptrSS_Thread
  1899                                  ; Ident ptrSP_Thread
  1900                                  ; Ident ptrSS_Kernel
  1901                                  ; Ident ptrSP0_Kernel
  1902                                  ; Ident SP0_SO1H
  1903                                  ; Ident ptrContRodajas
  1904                                  ; Ident ptrContTicsRodaja
  1905                                  ; Ident ptrVIOrg
  1906                                  ; Ident sigThread
  1907                                  ; Ident activarThread
  1908                                  ; Ident buscarNuevoThreadActual
  1909                                  ; Ident bloquearThreadActual
  1910                                  ; Ident ptrListaLibres
  1911                                  ; Ident ptrTamBloqueMax
  1912                                  ; Ident descSO1H_t
  1913                                  ; Ident startBin
  1914                                  ; Ident unidadBIOS
  1915                                  ; Ident CS_SO1H
  1916                                  ; Ident RO_SO1H
  1917                                  ; Ident DS_SO1H
  1918                                  ; Ident BSS_SO1H
  1919                                  ; Ident SS_SO1H
  1920                                  ; Ident SS_Kernel
  1921                                  ; Ident IMRInicial
  1922                                  ; Ident obtenerMapa
  1923                                  ; Ident descProcesoExt_t
  1924                                  ; Ident descThreadExt_t
  1925                                  ; Ident descProceso
  1926                                  ; Ident descThread
  1927                                  ; Ident descFichero
  1928                                  ; Ident descRecurso
  1929                                  ; Ident c2cPFR
  1930                                  ; Ident e2PFR
  1931                                  ; Ident descCcbAlEpilogo
  1932                                  ; Ident ccbAlEpilogo
  1933                                  ; Ident tramaThread
  1934                                  ; Ident tramaTarea
  1935                                  ; Ident indThreadActual
  1936                                  ; Ident indProcesoActual
  1937                                  ; Ident indThreadDeSuperficie
  1938                                  ; Ident contRodajas
  1939                                  ; Ident contTicsRodaja
  1940                                  ; Ident contadorTimer00
  1941                                  ; Ident contOcioso
  1942                                  ; Ident nuevoPid
  1943                                  ; Ident nuevoTid
  1944                                  ; Ident indice
  1945                                  ; Ident registrarEnPOrdenados
  1946                                  ; Ident crearThread
  1947                                  ; Ident funcion
  1948                                  ; Ident crearProceso
  1949                                  ; Ident tamFich
  1950                                  ; Ident inicProcesos
  1951                                  ; Ident resetPids
  1952                                  ; Ident resetTids
  1953                                  ; Ident terminarThreadIndx
  1954                                  ; Ident eliminarThreadIndx
  1955                                  ; Ident terminarProcIndx
  1956                                  ; Ident eliminarProcIndx
  1957                                  ; Ident matarThreadIndx
  1958                                  ; Ident matarProcIndx
  1959                                  ; Ident link_procs
  1960                                  ; Ident SS_Thread
  1961                                  ; Ident SP_Thread
  1962                                  ; Ident SS_Tarea
  1963                                  ; Ident SP_Tarea
  1964                                  ; Ident nivelActivacionSO1H
  1965                                  ; Ident nVIntActual
  1966                                  ; Ident enHalt
  1967                                  ; Ident activarAlEpilogo1
  1968                                  ; Ident hayTic
  1969                                  ; Ident setKernelStack
  1970                                  ; Ident setThreadStack
  1971                                  ; Ident reg_DL
  1972                                  ; Ident prepararDesbloqueadosUrgentes
  1973                                  ; Ident VIOrg
  1974                                  ; Ident recVInt
  1975                                  ; Ident redirigirInt
  1976                                  ; Ident redirigirIntHardware
  1977                                  ; Ident restablecerInt
  1978                                  ; Ident inicTVI
  1979                                  ; Ident link_ints
  1980                                  ; Ident printCarVideo
  1981                                  ; Ident car
  1982                                  ; Ident printLnVideo
  1983                                  ; Ident printStrVideo
  1984                                  ; Ident str
  1985                                  ; Ident printStrHastaVideo
  1986                                  ; Ident n
  1987                                  ; Ident lleno
  1988                                  ; Ident printDecVideo
  1989                                  ; Ident l
  1990                                  ; Ident printLDecVideo
  1991                                  ; Ident printIntVideo
  1992                                  ; Ident printLIntVideo
  1993                                  ; Ident printHexVideo
  1994                                  ; Ident printLHexVideo
  1995                                  ; Ident printBinVideo
  1996                                  ; Ident printLBinVideo
  1997                                  ; Ident printPtrVideo
  1998                                  ; Ident printByteVideo
  1999                                  ; Ident b
  2000                                  ; Ident printWordVideo
  2001                                  ; Ident w
  2002                                  ; Ident printCadVideo
  2003                                  ; Ident cad
  2004                                  ; Ident isrNula
  2005                                  ; Ident rti_00
  2006                                  ; Ident envolvente_00
  2007                                  ; Ident isr_x
  2008                                  ; Bytes used: 5106/16384
  2009                                  
  2010                                  ; Next label number: 91
  2011                                  ; Compilation succeeded.
